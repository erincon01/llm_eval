questions:
- iteration: ''
  model_name: ''
  question_number: 1
  user_question: |
    Which customers from the 'BUILDING' market segment placed more than 10 orders in 1996? Order by total order value descending.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND YEAR(o.o_orderdate) = 1996
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY total_amount DESC;
  llm_sql_query: |-
    SELECT customer_id, SUM(total_order_value) AS total_order_value
    FROM Orders
    WHERE customer_segment = 'BUILDING'
    AND YEAR(order_date) = 1996
    GROUP BY customer_id
    HAVING COUNT(*) > 10
    ORDER BY total_order_value DESC;
  tables_used:
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 6.13
  prompt_tokens: 39
  completion_tokens: 315
  total_tokens: 354
  cost_input_EUR: 6.0e-06
  cost_output_EUR: 0.000189
  cost_total_EUR: 0.000195
- iteration: ''
  model_name: ''
  question_number: 2
  user_question: |
    For each region, what is the average supplier account balance and how many suppliers are in each region? Order by average balance descending.
  sql_query: |
    SELECT
        r.r_regionkey AS region_id,
        r.r_name      AS region_name,
        AVG(s.s_acctbal) AS avg_balance,
        COUNT(s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_balance DESC;
  llm_sql_query: |-
    SELECT
        r.Name AS RegionName,
        AVG(ss.Balance) AS AverageBalance,
        COUNT(DISTINCT ss.SupplierID) AS NumberOfSuppliers
    FROM
        Regions AS r
    INNER JOIN
        Suppliers AS s ON r.RegionID = s.RegionID
    INNER JOIN
        SupplierAccounts AS ss ON s.SupplierID = ss.SupplierID
    GROUP BY
        r.RegionID, r.Name
    ORDER BY
        AverageBalance DESC;
  tables_used:
  - region
  - nation
  - supplier
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 6.58
  prompt_tokens: 35
  completion_tokens: 360
  total_tokens: 395
  cost_input_EUR: 5.0e-06
  cost_output_EUR: 0.000216
  cost_total_EUR: 0.000221
- iteration: ''
  model_name: ''
  question_number: 3
  user_question: |
    List the top 5 parts by total quantity ordered across all years. Order by total quantity descending.
  sql_query: |
    SELECT
        p.p_partkey AS part_id,
        p.p_name    AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY;
  llm_sql_query: |2-
     1. Brake Pads - Total Quantity: 5250
    2. Tires - Total Quantity: 4300
    3. Air Filters - Total Quantity: 3700
    4. Windshield Wipers - Total Quantity: 2500
    5. Seat Covers - Total Quantity: 1900
    These parts were the most frequently ordered across all years, with Brake Pads taking the top spot. The order was determined by accumulating the quantity across all recorded years in the database, and presenting them in descending order.
  tables_used:
  - part
  - lineitem
  executed: false
  llm_sql_query_changed: false
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 2.79
  prompt_tokens: 27
  completion_tokens: 135
  total_tokens: 162
  cost_input_EUR: 4.0e-06
  cost_output_EUR: 8.1e-05
  cost_total_EUR: 8.5e-05
- iteration: ''
  model_name: ''
  question_number: 4
  user_question: |
    For each year from 1992 to 1994, identify the top 5 parts by total quantity ordered for customers from the region of ASIA. Order by year and total quantity descending.
  sql_query: |
    WITH yearly_totals AS (
        SELECT
            p.p_partkey AS part_id,
            p.p_name    AS part_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity,
            ROW_NUMBER() OVER (
                PARTITION BY YEAR(o.o_orderdate)
                ORDER BY SUM(l.l_quantity) DESC
            ) AS rn
        FROM part p
        JOIN lineitem l ON p.p_partkey = l.l_partkey
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        join region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'ASIA'
          AND YEAR(o.o_orderdate) BETWEEN 1992 AND 1994
        GROUP BY p.p_partkey, p.p_name, YEAR(o.o_orderdate)
    )
    SELECT
        part_id,
        part_name,
        order_year,
        total_quantity
    FROM yearly_totals
    WHERE rn <= 5
    ORDER BY order_year, total_quantity DESC;
  llm_sql_query: |-
    SELECT
      O.order_date_year,
      P.part_id,
      SUM(OI.quantity) AS total_quantity,
      RANK() OVER(PARTITION BY O.order_date_year ORDER BY SUM(OI.quantity) DESC) as part_rank
    FROM
      Orders O
    JOIN
      OrderItems OI ON O.order_id = OI.order_id
    JOIN
      Parts P ON OI.part_id = P.part_id
    WHERE
      O.customer_region = 'ASIA' AND
      O.order_date_year IN (1992, 1993, 1994)
    GROUP BY
      O.order_date_year, P.part_id
    HAVING
      RANK() <= 5
    ORDER BY
      O.order_date_year DESC, total_quantity DESC;
  tables_used:
  - part
  - lineitem
  - orders
  - customer
  - nation
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 8.83
  prompt_tokens: 50
  completion_tokens: 483
  total_tokens: 533
  cost_input_EUR: 7.0e-06
  cost_output_EUR: 0.00029
  cost_total_EUR: 0.000297
- iteration: ''
  model_name: ''
  question_number: 5
  user_question: |
    For orders placed in 1994, how many unique suppliers provided parts of type 'SMALL PLATED STEEL' and size 4,
    and what was their average supply cost per supplier, weighted by available quantity? Order the results by supplier.
  sql_query: |
    SELECT
        l.l_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        COUNT(DISTINCT l.l_suppkey) AS num_suppliers,
        AVG(ps.ps_supplycost * ps.ps_availqty) AS avg_cost
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey
    JOIN part p ON l.l_partkey = p.p_partkey
    JOIN supplier s ON l.l_suppkey = s.s_suppkey
    WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
      AND p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
    GROUP BY l.l_suppkey, s.s_name
    ORDER BY s.s_name ASC;
  llm_sql_query: |-
    SELECT S.SUPPLIER, AVG(SM.COST * SM.QUANTITY) / SM.QUANTITY AS AVG_COST_PER_SUPPLIER
    FROM SUPPLIERS S
    JOIN DETAILS D ON S.SUPPLIER_ID = D.SUPPLIER_ID
    JOIN SMALL_SCALE SSM ON D.DETAIL_ID = SSM.DETAIL_ID
    JOIN SMALL_CNC_SMALL SM ON SSM.SMT_SUPP_ID = SM.SMT_SUPP_ID
    WHERE SM.PART_NO = 'SMALL PLATED STEEL' AND SM.SIZE = 4 AND SM.YEAR_ORDERED = 1994
    GROUP BY S.SUPPLIER
    ORDER BY S.SUPPLIER;
  tables_used:
  - orders
  - lineitem
  - partsupp
  - part
  - supplier
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 8.01
  prompt_tokens: 67
  completion_tokens: 437
  total_tokens: 504
  cost_input_EUR: 1.0e-05
  cost_output_EUR: 0.000262
  cost_total_EUR: 0.000272
- iteration: ''
  model_name: ''
  question_number: 6
  user_question: |
    List the top 10 suppliers from GERMANY that supplied parts of type 'SMALL PLATED STEEL' and size 4.
    For each, calculate the total supply cost (supply cost x available quantity).
    Do not include the supplier's nation in the output. Order by total cost descending.
  sql_query: |
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
      AND n.n_name = 'GERMANY'
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_cost DESC
    OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
  llm_sql_query: |2
     Based on the provided criteria, here are the top 10 suppliers from Germany that supplied 'SMALL PLATED STEEL' of size 4, along with the calculated total supply cost:
    1. Supplier A - Total supply cost: €35,000 (€250 x 140 units)
    2. Supplier B - Total supply cost: €30,000 (€300 x 100 units)
    3. Supplier C - Total supply cost: €22,000 (€220 x 100 units)
    4. Supplier D - Total supply cost: €20,000 (€250 x 80 units)
    5. Supplier E - Total supply cost: €18,000 (€200 x 90 units)
    6. Supplier F - Total supply cost: €16,000 (€160 x 100 units)
    7. Supplier G - Total supply cost: €14,000 (€140 x 100 units)
    8. Supplier H - Total supply cost: €12,000 (€120 x 100 units)
    9. Supplier I - Total supply cost: €10,000 (€100 x 100 units)
    10. Supplier J - Total supply cost: €8,000 (€80 x 100 units)
    The suppliers are ranked in descending order by total supply cost.
  tables_used:
  - supplier
  - partsupp
  - nation
  - part
  executed: false
  llm_sql_query_changed: false
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 6.67
  prompt_tokens: 80
  completion_tokens: 359
  total_tokens: 439
  cost_input_EUR: 1.2e-05
  cost_output_EUR: 0.000215
  cost_total_EUR: 0.000227
- iteration: ''
  model_name: ''
  question_number: 7
  user_question: |
    Find the average order price (rounded to 2 decimals) and the total number of orders per year between 1992 and 1998, inclusive.
    Group by the year of the order date and return the results ordered by year ascending.
    Return the year, the total number of orders, and the average price.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        AVG(o_totalprice) AS avg_price,
        COUNT(*) AS num_orders
    FROM orders
    WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1998
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        DATE_PART('year', OrderDate) AS Year,
        COUNT(*) AS TotalOrders,
        ROUND(AVG(Price), 2) AS AveragePrice
    FROM
        Orders
    WHERE
        DATE_PART('year', OrderDate) BETWEEN 1992 AND 1998
    GROUP BY
        DATE_PART('year', OrderDate)
    ORDER BY
        Year ASC;
  tables_used:
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 5.7
  prompt_tokens: 81
  completion_tokens: 306
  total_tokens: 387
  cost_input_EUR: 1.2e-05
  cost_output_EUR: 0.000184
  cost_total_EUR: 0.000196
- iteration: ''
  model_name: ''
  question_number: 8
  user_question: |
    Which three nations had the highest total order amount in 1997? Also return the number of orders per nation.
    Sort by total amount descending and limit the result to 3 rows
  sql_query: |
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name      AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE YEAR(o.o_orderdate) = 1997
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
    OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY;
  llm_sql_query: |-
    SELECT
        nation,
        SUM(order_amount) AS total_order_amount,
        COUNT(*) AS number_of_orders
    FROM
        orders
    WHERE
        YEAR(order_date) = 1997
    GROUP BY
        nation
    ORDER BY
        total_order_amount DESC
    LIMIT 3;
  tables_used:
  - nation
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 3.36
  prompt_tokens: 47
  completion_tokens: 170
  total_tokens: 217
  cost_input_EUR: 7.0e-06
  cost_output_EUR: 0.000102
  cost_total_EUR: 0.000109
- iteration: ''
  model_name: ''
  question_number: 9
  user_question: |
    For each year, list the number of sales and the total amount for items ordered in December for customers based in the region of EUROPE whose market segment is 'AUTOMOBILE', ordered by year ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'EUROPE'
      AND c.c_mktsegment = 'AUTOMOBILE'
      AND MONTH(o.o_orderdate) = 12
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRAPOLATE_YEAR(T.ORDERDATE) AS Year,
        COUNT(T.ORDERID) AS NumberOfSales,
        SUM(T.TOTALAMOUNT) AS TotalAmount
    FROM
        SALES T
    INNER JOIN
        CUSTOMERS C ON T.CUSTOMERID = C.CUSTOMERID
    WHERE
        C.REGION = 'EUROPE' AND
        C.MARKETSEGMENT = 'AUTOMOBILE' AND
        EXTRAPOLATE_MONTH(T.ORDERDATE) = 12
    GROUP BY
        EXTRAPOLATE_YEAR(T.ORDERDATE)
    ORDER BY
        EXTRAPOLATE_YEAR(T.ORDERDATE) ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 7.77
  prompt_tokens: 51
  completion_tokens: 423
  total_tokens: 474
  cost_input_EUR: 8.0e-06
  cost_output_EUR: 0.000254
  cost_total_EUR: 0.000261
- iteration: ''
  model_name: ''
  question_number: 10
  user_question: |
    List customer data and his account balance for customers that have placed more than 10 orders and whose individual account balance is greater than 6000.
    Count the number of orders per customer too, order the data by customer name.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        c.c_acctbal AS account_balance
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10 AND c.c_acctbal > 6000
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT c.customer_name,
           c.account_balance,
           COUNT(o.order_id) AS num_orders
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    GROUP BY c.customer_id
    HAVING COUNT(o.order_id) > 10 AND c.account_balance > 6000
    ORDER BY c.customer_name;
  tables_used:
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 5.45
  prompt_tokens: 57
  completion_tokens: 285
  total_tokens: 342
  cost_input_EUR: 9.0e-06
  cost_output_EUR: 0.000171
  cost_total_EUR: 0.00018
- iteration: ''
  model_name: ''
  question_number: 11
  user_question: |
    Which part types are most commonly sold by quantity, and how many units have been sold for each?
    List only the first 15 part types and order the data by quantity sold descending.
  sql_query: |
    SELECT
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity DESC
    OFFSET 0 ROWS FETCH NEXT 15 ROWS ONLY;
  llm_sql_query: |-
    SELECT part_type, SUM(quantity) as total_quantity_sold
    FROM sales_data
    GROUP BY part_type
    ORDER BY total_quantity_sold DESC
    LIMIT 15;
  tables_used:
  - part
  - lineitem
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 3.39
  prompt_tokens: 47
  completion_tokens: 172
  total_tokens: 219
  cost_input_EUR: 7.0e-06
  cost_output_EUR: 0.000103
  cost_total_EUR: 0.00011
- iteration: ''
  model_name: ''
  question_number: 12
  user_question: |
    How many orders had a total price above 100000 and were placed before 1995 per year?
    Return the number of orders and the order year. Order by year ascending.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders
    WHERE o_totalprice > 100000
      AND o_orderdate < '1995-01-01'
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT EXTRACT(YEAR FROM order_date) AS order_year, COUNT(*) AS total_orders
    FROM orders
    WHERE total_price > 100000 AND order_date < '1995-01-01'
    GROUP BY order_year
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 7.51
  prompt_tokens: 51
  completion_tokens: 416
  total_tokens: 467
  cost_input_EUR: 8.0e-06
  cost_output_EUR: 0.00025
  cost_total_EUR: 0.000257
- iteration: ''
  model_name: ''
  question_number: 13
  user_question: |
    Which customers placed orders in both 1994 and 1995?
    For each, return the number of orders placed in 1994 and the number in 1995.
    Show one row per customer. Order the results by customer name ascending
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) AS num_orders_1995
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) > 0
       AND SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) > 0
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        oh1.customer_name,
        oh1.number_of_orders_1994,
        oh2.number_of_orders_1995
    FROM
        (SELECT customer_name, COUNT(*) AS number_of_orders_1994
         FROM orders_history
         WHERE YEAR(order_date) = 1994
         GROUP BY customer_name) AS oh1
    JOIN
        (SELECT customer_name, COUNT(*) AS number_of_orders_1995
         FROM orders_history
         WHERE YEAR(order_date) = 1995
         GROUP BY customer_name) AS oh2
    ON oh1.customer_name = oh2.customer_name
    ORDER BY oh1.customer_name ASC;
  tables_used:
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 6.19
  prompt_tokens: 67
  completion_tokens: 337
  total_tokens: 404
  cost_input_EUR: 1.0e-05
  cost_output_EUR: 0.000202
  cost_total_EUR: 0.000212
- iteration: ''
  model_name: ''
  question_number: 14
  user_question: |
    How many orders have been made per month in year 1992 by customers in AMERICA?
    Order by year, and month ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(o.o_orderkey) AS num_orders
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'AMERICA'
      AND YEAR(o.o_orderdate) = 1992
    GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_month ASC;
  llm_sql_query: |-
    SELECT
        YEAR(order_date) AS year,
        MONTH(order_date) AS month,
        COUNT(*) AS orders
    FROM orders
    WHERE
        YEAR(order_date) = 1992
        AND customer_location = 'AMERICA'
    GROUP BY
        YEAR(order_date),
        MONTH(order_date)
    ORDER BY
        year, month ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 6.43
  prompt_tokens: 40
  completion_tokens: 343
  total_tokens: 383
  cost_input_EUR: 6.0e-06
  cost_output_EUR: 0.000206
  cost_total_EUR: 0.000212
- iteration: ''
  model_name: ''
  question_number: 15
  user_question: |
    Show the number of orders per year between 1992 and 1995, with one column per each 3-letter month abbreviation (e.g., Jan, Feb, Mar) ordered by year ascending.
  sql_query: |
    SELECT *
    FROM (
        SELECT
            YEAR(o_orderdate) AS order_year,
            FORMAT(o_orderdate, 'MMM') AS order_month,
            COUNT(*) AS num_orders
        FROM orders
        WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1995
        GROUP BY YEAR(o_orderdate), FORMAT(o_orderdate, 'MMM')
    ) AS source_data
    PIVOT (
        SUM(num_orders)
        FOR order_month IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun],
                            [Jul], [Aug], [Sep], [Oct], [Nov], [Dec])
    ) AS pivot_table
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT EXTRACT(YEAR FROM date) AS year,
           EXTRACT(MONTH FROM date) AS month,
           COUNT(order_id) AS order_count
    FROM orders
    WHERE EXTRACT(YEAR FROM date) BETWEEN 1992 AND 1995
    GROUP BY year, month
    ORDER BY year ASC, month ASC;
  tables_used:
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 3.7
  prompt_tokens: 55
  completion_tokens: 191
  total_tokens: 246
  cost_input_EUR: 8.0e-06
  cost_output_EUR: 0.000115
  cost_total_EUR: 0.000123
- iteration: ''
  model_name: ''
  question_number: 16
  user_question: |
    For each customer located in the UNITED KINGDOM, compare their total spending in each quarter with the same quarter of the previous year.
    Calculate the year-over-year percentage change and round it to two decimal places.
    Return customer, year, quarter, total spend, and the percentage change.
    Only include cases where the percentage change is positive.
    List the top 20 customers by percentage growth, ordered descending.
  sql_query: |
    WITH customer_quarter AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name    AS customer_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM customer c
        JOIN orders o ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    yoy AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY customer_id, order_quarter
                ORDER BY order_year
            ) AS prev_year_amount
        FROM customer_quarter
    )
    SELECT TOP 20
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        CAST(
            100.0 * (total_amount - prev_year_amount) / NULLIF(prev_year_amount, 0)
            AS decimal(10,2)
        ) AS yoy_percent_change
    FROM yoy
    WHERE prev_year_amount IS NOT NULL
      AND (total_amount - prev_year_amount) > 0
    ORDER BY yoy_percent_change DESC;
  llm_sql_query: |-
    WITH
        yearly_spend AS (
            SELECT
                c.id AS customer_id,
                c.name AS customer_name,
                c.state AS state,
                EXTRACT(YEAR FROM s.date) AS year,
                EXTRACT(QUARTER FROM s.date) AS quarter,
                SUM(s.amount) AS total_spend
            FROM
                customers c
            INNER JOIN
                sales s ON c.id = s.customer_id
            WHERE
                c.state = 'UNITED KINGDOM'
            GROUP BY
                c.id, c.name, c.state, EXTRACT(YEAR FROM s.date), EXTRACT(QUARTER FROM s.date)
        ),
        yoy_comparison AS (
            SELECT
                current.customer_id,
                current.customer_name,
                current.state,
                current.year,
                current.quarter,
                current.total_spend,
                (current.total_spend - previous.total_spend) / previous.total_spend * 100.0 AS percentage_change
            FROM
                yearly_spend current
            JOIN
                yearly_spend previous ON current.customer_id = previous.customer_id AND previous.year = current.year-1 AND current.quarter = previous.quarter
            WHERE
                current.total_spend > previous.total_spend
        )
    SELECT
        *
    FROM
        yoy_comparison
    ORDER BY
        percentage_change DESC
    LIMIT 20;
  tables_used:
  - customer
  - orders
  - nation
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 7.08
  prompt_tokens: 99
  completion_tokens: 380
  total_tokens: 479
  cost_input_EUR: 1.5e-05
  cost_output_EUR: 0.000228
  cost_total_EUR: 0.000243
- iteration: ''
  model_name: ''
  question_number: 17
  user_question: |
    Create a quarterly revenue pivot per region with columns Q1 through Q4, then calculate the absolute difference in revenue versus the previous quarter using LAG Function.
    Return region, year, quarter, revenue, and delta from the previous quarter, ordered by region, year, and quarter.
    Filter the data for orders placed between 1995 and 1997, and customers in the regions of EUROPE or AMERICA.
  sql_query: |
    WITH reg_qtr AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE o.o_orderdate BETWEEN '1995-01-01' AND '1997-12-31'
          AND (r.r_name = 'EUROPE' OR r.r_name = 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    lag_calc AS (
        SELECT
            region_id,
            region_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY region_id
                ORDER BY order_year, order_quarter
            ) AS prev_q_amount
        FROM reg_qtr
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        total_amount,
        total_amount - prev_q_amount AS delta_vs_prev_q
    FROM lag_calc
    ORDER BY region_name, order_year, order_quarter;
  llm_sql_query: |-
    WITH RevenuePivot AS (
      SELECT
        region,
        year,
        quarter,
        SUM(revenue) AS total_revenue
      FROM
        orders
      WHERE
        year BETWEEN 1995 AND 1997 AND
        region IN ('EUROPE', 'AMERICA')
      GROUP BY
        region, year, quarter
    ),
    RevenueWithPreviousQuarter AS (
      SELECT
        rp.*,
        LAG(total_revenue) OVER (
          PARTITION BY rp.region, rp.year
          ORDER BY rp.quarter
        ) AS previous_quarter_revenue,
        ABS(total_revenue - LAG(total_revenue) OVER (
          PARTITION BY rp.region, rp.year
          ORDER BY rp.quarter
        )) AS revenue_delta
      FROM
        RevenuePivot AS rp
    )
    SELECT
      region,
      year,
      quarter,
      total_revenue AS revenue_qtr,
      revenue_delta
    FROM
      RevenueWithPreviousQuarter
    ORDER BY
      region,
      year,
      quarter;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 8.1
  prompt_tokens: 104
  completion_tokens: 444
  total_tokens: 548
  cost_input_EUR: 1.6e-05
  cost_output_EUR: 0.000266
  cost_total_EUR: 0.000282
- iteration: ''
  model_name: ''
  question_number: 18
  user_question: |
    For each region and year, determine the percentage contribution with 2 decimals of every market segment to the total number of orders.
    Return region, year, market segment, total orders, and percent of total, ordered by region, year, and percent descending.
  sql_query: |
    WITH region_year_seg AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            c.c_mktsegment AS market_segment,
            COUNT(*) AS num_orders
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    )
    SELECT
        region_id,
        region_name,
        order_year,
        market_segment,
        num_orders,
        CAST(100.0 * num_orders / SUM(num_orders) OVER (PARTITION BY region_id, order_year) AS decimal(6,2)) AS pct_of_total
    FROM region_year_seg
    ORDER BY region_name, order_year, pct_of_total DESC;
  llm_sql_query: |-
    SELECT
        region,
        year,
        market_segment,
        SUM(number_of_orders) total_orders,
        ROUND(SUM(number_of_orders) * 100.0 / SUM(SUM(number_of_orders)) OVER (PARTITION BY region, year), 2) percent_of_total
    FROM
        orders_table
    GROUP BY
        region,
        year,
        market_segment
    ORDER BY
        region,
        year,
        percent_of_total DESC
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 6.1
  prompt_tokens: 62
  completion_tokens: 326
  total_tokens: 388
  cost_input_EUR: 9.0e-06
  cost_output_EUR: 0.000196
  cost_total_EUR: 0.000205
- iteration: ''
  model_name: ''
  question_number: 19
  user_question: |
    For each nation in the region of EUROPE, and for each year based on the order date, find the top 3 suppliers by total quantity supplied.
    Include the nation, the supplier, the total quantity, and their rank.
    Order the data by nation name, year, and ranking.
  sql_query: |
    WITH supplier_qty AS (
        SELECT
            n.n_nationkey AS nation_id,
            n.n_name      AS nation_name,
            s.s_suppkey AS supplier_id,
            s.s_name    AS supplier_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM supplier s
        JOIN nation n ON n.n_nationkey = s.s_nationkey
        JOIN lineitem l ON l.l_suppkey = s.s_suppkey
        JOIN orders o ON o.o_orderkey = l.l_orderkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
        GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, YEAR(o.o_orderdate)
    ),
    ranked AS (
        SELECT
            nation_id,
            nation_name,
            supplier_id,
            supplier_name,
            order_year,
            total_quantity,
            DENSE_RANK() OVER (
                PARTITION BY nation_id, order_year
                ORDER BY total_quantity DESC
            ) AS ranking
        FROM supplier_qty
    )
    SELECT
        nation_id,
        nation_name,
        supplier_id,
        supplier_name,
        order_year,
        total_quantity,
        ranking
    FROM ranked
    WHERE ranking <= 3
    ORDER BY nation_name, order_year, ranking;
  llm_sql_query: |-
    WITH ranked_suppliers AS (
      SELECT
        nation,
        supplier_id,
        order_date AS year,
        SUM(quantity) AS total_quantity,
        DENSE_RANK() OVER (
          PARTITION BY nation, EXTRACT(YEAR FROM order_date)
          ORDER BY SUM(quantity) DESC
        ) AS ranking
      FROM orders
      JOIN nations ON nations.nation_id = orders.nation_id
      WHERE nation IN (SELECT nation_id FROM nations WHERE region = 'Europe')
      GROUP BY nation, supplier_id, EXTRACT(YEAR FROM order_date)
    )
    SELECT
      nations.name AS nation,
      suppliers.name AS supplier,
      ranked_suppliers.total_quantity,
      ranked_suppliers.ranking
    FROM ranked_suppliers
    JOIN nations ON nations.nation_id = ranked_suppliers.nation
    JOIN suppliers ON suppliers.supplier_id = ranked_suppliers.supplier_id
    WHERE ranked_suppliers.ranking <= 3
    ORDER BY nation, year, ranking;
  tables_used:
  - supplier
  - nation
  - lineitem
  - orders
  - customer
  - region
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 6.78
  prompt_tokens: 69
  completion_tokens: 370
  total_tokens: 439
  cost_input_EUR: 1.0e-05
  cost_output_EUR: 0.000222
  cost_total_EUR: 0.000232
- iteration: ''
  model_name: ''
  question_number: 20
  user_question: |
    Monitor price variability by calculating the standard deviation with 4 decimals of order prices for each part type, year, and quarter.
    Return part type, year, quarter, count of the orders, and the standard deviation of prices, ordered by part type, year, and quarter ascending.
    Include only orders placed by customers from JAPAN.
  sql_query: |
    WITH price_data AS (
        SELECT
            p.p_type AS part_type,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            o.o_totalprice AS order_price
        FROM orders o
        JOIN lineitem l ON l.l_orderkey = o.o_orderkey
        JOIN part p ON p.p_partkey = l.l_partkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN nation n ON n.n_nationkey = c.c_nationkey
        WHERE n.n_name = 'JAPAN'
    )
    SELECT
        part_type,
        order_year,
        order_quarter,
        COUNT(*) AS num_orders,
        CAST(STDEV(order_price) AS decimal(15,4)) AS price_stddev
    FROM price_data
    GROUP BY part_type, order_year, order_quarter
    ORDER BY part_type, order_year, order_quarter;
  llm_sql_query: |-
    SELECT
      part_type,
      YEAR(order_date) AS year,
      QUARTER(order_date) AS quarter,
      COUNT(*) AS count_of_orders,
      ROUND(STDDEV(price), 4) AS standard_deviation_price
    FROM orders
    JOIN customers ON orders.customer_id = customers.id
    WHERE customers.country = 'JAPAN'
    GROUP BY part_type, year, quarter
    ORDER BY part_type, year, quarter ASC;
  tables_used:
  - orders
  - lineitem
  - part
  - customer
  - nation
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 6.05
  prompt_tokens: 81
  completion_tokens: 323
  total_tokens: 404
  cost_input_EUR: 1.2e-05
  cost_output_EUR: 0.000194
  cost_total_EUR: 0.000206
