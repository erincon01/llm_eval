questions:
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 1
  user_question: |
    Which customers from the 'BUILDING' market segment placed more than 10 orders in 1996? Order by total order value descending.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND YEAR(o.o_orderdate) = 1996
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY total_amount DESC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND o.o_orderdate BETWEEN '1996-01-01' AND '1996-12-31'
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY total_amount DESC;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.49
  duration_llm: 1.65
  prompt_tokens: 1645
  completion_tokens: 128
  total_tokens: 1773
  cost_input_EUR: 0.000214
  cost_output_EUR: 6.4e-05
  cost_total_EUR: 0.000278
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 2
  user_question: |
    For each region, what is the average supplier account balance and how many suppliers are in each region? Order by average balance descending.
  sql_query: |
    SELECT
        r.r_regionkey AS region_id,
        r.r_name      AS region_name,
        AVG(s.s_acctbal) AS avg_balance,
        COUNT(s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_balance DESC;
  llm_sql_query: |-
    SELECT
        r.r_regionkey AS region_id,
        r.r_name AS region_name,
        AVG(s.s_acctbal) AS average_supplier_balance,
        COUNT(s.s_suppkey) AS num_suppliers
    FROM supplier s
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY average_supplier_balance DESC;
  tables_used:
  - region
  - nation
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.12
  duration_llm: 1.53
  prompt_tokens: 1554
  completion_tokens: 100
  total_tokens: 1654
  cost_input_EUR: 0.000202
  cost_output_EUR: 5.0e-05
  cost_total_EUR: 0.000252
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 3
  user_question: |
    List the top 5 parts by total quantity ordered across all years. Order by total quantity descending.
  sql_query: |
    SELECT
        p.p_partkey AS part_id,
        p.p_name    AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 5
        p.p_partkey AS part_id,
        p.p_name AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON l.l_partkey = p.p_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC;
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 7.47
  duration_llm: 1.14
  prompt_tokens: 1836
  completion_tokens: 69
  total_tokens: 1905
  cost_input_EUR: 0.000239
  cost_output_EUR: 3.4e-05
  cost_total_EUR: 0.000273
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 4
  user_question: |
    For each year from 1992 to 1994, identify the top 5 parts by total quantity ordered for customers from the region of ASIA. Order by year and total quantity descending.
  sql_query: |
    WITH yearly_totals AS (
        SELECT
            p.p_partkey AS part_id,
            p.p_name    AS part_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity,
            ROW_NUMBER() OVER (
                PARTITION BY YEAR(o.o_orderdate)
                ORDER BY SUM(l.l_quantity) DESC
            ) AS rn
        FROM part p
        JOIN lineitem l ON p.p_partkey = l.l_partkey
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        join region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'ASIA'
          AND YEAR(o.o_orderdate) BETWEEN 1992 AND 1994
        GROUP BY p.p_partkey, p.p_name, YEAR(o.o_orderdate)
    )
    SELECT
        part_id,
        part_name,
        order_year,
        total_quantity
    FROM yearly_totals
    WHERE rn <= 5
    ORDER BY order_year, total_quantity DESC;
  llm_sql_query: |-
    WITH regional_orders AS (
        SELECT
            YEAR(o.o_orderdate) AS order_year,
            l.l_partkey,
            SUM(l.l_quantity) AS total_quantity
        FROM orders o
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        JOIN lineitem l ON o.o_orderkey = l.l_orderkey
        WHERE r.r_name = 'ASIA'
          AND o.o_orderdate BETWEEN '1992-01-01' AND '1994-12-31'
        GROUP BY YEAR(o.o_orderdate), l.l_partkey
    ),
    ranked_parts AS (
        SELECT
            order_year,
            l_partkey AS part_id,
            total_quantity,
            ROW_NUMBER() OVER (PARTITION BY order_year ORDER BY total_quantity DESC) AS quantity_rank
        FROM regional_orders
    )
    SELECT TOP 15
        order_year,
        part_id,
        p.p_name AS part_name,
        total_quantity
    FROM ranked_parts
    JOIN part p ON part_id = p.p_partkey
    WHERE quantity_rank <= 5
    ORDER BY order_year, total_quantity DESC;
  tables_used:
  - part
  - lineitem
  - orders
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 4.7
  duration_llm: 2.72
  prompt_tokens: 2164
  completion_tokens: 263
  total_tokens: 2427
  cost_input_EUR: 0.000281
  cost_output_EUR: 0.000131
  cost_total_EUR: 0.000413
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 5
  user_question: |
    For orders placed in 1994, how many unique suppliers provided parts of type 'SMALL PLATED STEEL' and size 4,
    and what was their average supply cost per supplier, weighted by available quantity? Order the results by supplier.
  sql_query: |
    SELECT
        l.l_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        COUNT(DISTINCT l.l_suppkey) AS num_suppliers,
        AVG(ps.ps_supplycost * ps.ps_availqty) AS avg_cost
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey
    JOIN part p ON l.l_partkey = p.p_partkey
    JOIN supplier s ON l.l_suppkey = s.s_suppkey
    WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
      AND p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
    GROUP BY l.l_suppkey, s.s_name
    ORDER BY s.s_name ASC;
  llm_sql_query: |-
    WITH filtered_partsupp AS (
        SELECT
            ps.ps_suppkey AS supplier_id,
            ps.ps_supplycost AS supply_cost,
            ps.ps_availqty AS available_quantity
        FROM partsupp ps
        JOIN part p ON ps.ps_partkey = p.p_partkey
        WHERE p.p_type = 'SMALL PLATED STEEL' AND p.p_size = 4
    ),
    supplier_orders AS (
        SELECT
            l.l_suppkey AS supplier_id,
            COUNT(DISTINCT l.l_orderkey) AS num_orders
        FROM lineitem l
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
        GROUP BY l.l_suppkey
    )
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        COUNT(DISTINCT ps.supplier_id) AS num_suppliers,
        SUM(ps.supply_cost * ps.available_quantity) / SUM(ps.available_quantity) AS avg_supply_cost
    FROM supplier s
    JOIN filtered_partsupp ps ON s.s_suppkey = ps.supplier_id
    JOIN supplier_orders so ON s.s_suppkey = so.supplier_id
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY s.s_name;
  tables_used:
  - orders
  - lineitem
  - partsupp
  - part
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 942
  columns: 4
  rows_equality: 0.0
  columns_equality: 0.25
  datasets_equality: 0.0
  duration_sql: 3.46
  duration_llm: 2.89
  prompt_tokens: 2185
  completion_tokens: 283
  total_tokens: 2468
  cost_input_EUR: 0.000284
  cost_output_EUR: 0.000141
  cost_total_EUR: 0.000426
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 6
  user_question: |
    List the top 10 suppliers from GERMANY that supplied parts of type 'SMALL PLATED STEEL' and size 4.
    For each, calculate the total supply cost (supply cost x available quantity).
    Do not include the supplier's nation in the output. Order by total cost descending.
  sql_query: |
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
      AND n.n_name = 'GERMANY'
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_cost DESC
    OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 10
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    WHERE n.n_name = 'GERMANY'
      AND p.p_type = 'SMALL PLATED STEEL'
      AND p.p_size = 4
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_supply_cost DESC
  tables_used:
  - supplier
  - partsupp
  - nation
  - part
  executed: true
  llm_sql_query_changed: false
  rows: 10
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.64
  duration_llm: 3.48
  prompt_tokens: 1725
  completion_tokens: 147
  total_tokens: 1872
  cost_input_EUR: 0.000224
  cost_output_EUR: 7.3e-05
  cost_total_EUR: 0.000298
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 7
  user_question: |
    Find the average order price (rounded to 2 decimals) and the total number of orders per year between 1992 and 1998, inclusive.
    Group by the year of the order date and return the results ordered by year ascending.
    Return the year, the total number of orders, and the average price.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        AVG(o_totalprice) AS avg_price,
        COUNT(*) AS num_orders
    FROM orders
    WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1998
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        ROUND(AVG(o.o_totalprice), 2) AS avg_order_price
    FROM orders o
    WHERE o.o_orderdate BETWEEN '1992-01-01' AND '1998-12-31'
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 7
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.95
  duration_llm: 1.24
  prompt_tokens: 1583
  completion_tokens: 79
  total_tokens: 1662
  cost_input_EUR: 0.000206
  cost_output_EUR: 3.9e-05
  cost_total_EUR: 0.000245
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 8
  user_question: |
    Which three nations had the highest total order amount in 1997? Also return the number of orders per nation.
    Sort by total amount descending and limit the result to 3 rows
  sql_query: |
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name      AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE YEAR(o.o_orderdate) = 1997
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
    OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 3
        n.n_nationkey AS nation_id,
        n.n_name AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    WHERE o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
  tables_used:
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.79
  duration_llm: 1.52
  prompt_tokens: 1703
  completion_tokens: 122
  total_tokens: 1825
  cost_input_EUR: 0.000221
  cost_output_EUR: 6.1e-05
  cost_total_EUR: 0.000282
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 9
  user_question: |
    For each year, list the number of sales and the total amount for items ordered in December for customers based in the region of EUROPE whose market segment is 'AUTOMOBILE', ordered by year ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'EUROPE'
      AND c.c_mktsegment = 'AUTOMOBILE'
      AND MONTH(o.o_orderdate) = 12
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM
        orders o
    JOIN
        customer c ON o.o_custkey = c.c_custkey
    JOIN
        nation n ON c.c_nationkey = n.n_nationkey
    JOIN
        region r ON n.n_regionkey = r.r_regionkey
    WHERE
        r.r_name = 'EUROPE'
        AND c.c_mktsegment = 'AUTOMOBILE'
        AND MONTH(o.o_orderdate) = 12
    GROUP BY
        YEAR(o.o_orderdate)
    ORDER BY
        order_year ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 2.12
  duration_llm: 1.85
  prompt_tokens: 1743
  completion_tokens: 149
  total_tokens: 1892
  cost_input_EUR: 0.000227
  cost_output_EUR: 7.4e-05
  cost_total_EUR: 0.000301
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 10
  user_question: |
    List customer data and his account balance for customers that have placed more than 10 orders and whose individual account balance is greater than 6000.
    Count the number of orders per customer too, order the data by customer name.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        c.c_acctbal AS account_balance
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10 AND c.c_acctbal > 6000
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        c.c_acctbal AS account_balance,
        COUNT(o.o_orderkey) AS num_orders
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10 AND c.c_acctbal > 6000
    ORDER BY c.c_name
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 19
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 2.31
  duration_llm: 1.44
  prompt_tokens: 1664
  completion_tokens: 107
  total_tokens: 1771
  cost_input_EUR: 0.000216
  cost_output_EUR: 5.3e-05
  cost_total_EUR: 0.00027
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 11
  user_question: |
    Which part types are most commonly sold by quantity, and how many units have been sold for each?
    List only the first 15 part types and order the data by quantity sold descending.
  sql_query: |
    SELECT
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity DESC
    OFFSET 0 ROWS FETCH NEXT 15 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 15
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON l.l_partkey = p.p_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity DESC
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 2
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 6.31
  duration_llm: 0.96
  prompt_tokens: 1854
  completion_tokens: 55
  total_tokens: 1909
  cost_input_EUR: 0.000241
  cost_output_EUR: 2.7e-05
  cost_total_EUR: 0.000269
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 12
  user_question: |
    How many orders had a total price above 100000 and were placed before 1995 per year?
    Return the number of orders and the order year. Order by year ascending.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders
    WHERE o_totalprice > 100000
      AND o_orderdate < '1995-01-01'
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders o
    WHERE o.o_totalprice > 100000
      AND o.o_orderdate < '1995-01-01'
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 2
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.6
  duration_llm: 1.18
  prompt_tokens: 1556
  completion_tokens: 64
  total_tokens: 1620
  cost_input_EUR: 0.000202
  cost_output_EUR: 3.2e-05
  cost_total_EUR: 0.000234
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 13
  user_question: |
    Which customers placed orders in both 1994 and 1995?
    For each, return the number of orders placed in 1994 and the number in 1995.
    Show one row per customer. Order the results by customer name ascending
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) AS num_orders_1995
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) > 0
       AND SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) > 0
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) AS num_orders_1995
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE YEAR(o.o_orderdate) IN (1994, 1995)
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) > 0
       AND SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) > 0
    ORDER BY customer_name ASC
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 6
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 2.0
  duration_llm: 2.1
  prompt_tokens: 1668
  completion_tokens: 190
  total_tokens: 1858
  cost_input_EUR: 0.000217
  cost_output_EUR: 9.5e-05
  cost_total_EUR: 0.000312
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 14
  user_question: |
    How many orders have been made per month in year 1992 by customers in AMERICA?
    Order by year, and month ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(o.o_orderkey) AS num_orders
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'AMERICA'
      AND YEAR(o.o_orderdate) = 1992
    GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_month ASC;
  llm_sql_query: |-
    WITH orders_per_month AS (
        SELECT
            YEAR(o.o_orderdate) AS order_year,
            MONTH(o.o_orderdate) AS order_month,
            COUNT(o.o_orderkey) AS num_orders
        FROM orders o
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'AMERICA' AND YEAR(o.o_orderdate) = 1992
        GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    )
    SELECT
        order_year,
        order_month,
        num_orders
    FROM orders_per_month
    ORDER BY order_year, order_month;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.95
  duration_llm: 2.94
  prompt_tokens: 1731
  completion_tokens: 162
  total_tokens: 1893
  cost_input_EUR: 0.000225
  cost_output_EUR: 8.1e-05
  cost_total_EUR: 0.000306
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 15
  user_question: |
    Show the number of orders per year between 1992 and 1995, with one column per each 3-letter month abbreviation (e.g., Jan, Feb, Mar) ordered by year ascending.
  sql_query: |
    SELECT *
    FROM (
        SELECT
            YEAR(o_orderdate) AS order_year,
            FORMAT(o_orderdate, 'MMM') AS order_month,
            COUNT(*) AS num_orders
        FROM orders
        WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1995
        GROUP BY YEAR(o_orderdate), FORMAT(o_orderdate, 'MMM')
    ) AS source_data
    PIVOT (
        SUM(num_orders)
        FOR order_month IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun],
                            [Jul], [Aug], [Sep], [Oct], [Nov], [Dec])
    ) AS pivot_table
    ORDER BY order_year ASC;
  llm_sql_query: |-
    WITH order_details AS (
        SELECT
            YEAR(o.o_orderdate) AS order_year,
            FORMAT(o.o_orderdate, 'MMM') AS order_month,
            o.o_orderkey AS order_key
        FROM orders o
        WHERE o.o_orderdate BETWEEN '1992-01-01' AND '1995-12-31'
    )
    SELECT
        order_year,
        SUM(CASE WHEN order_month = 'Jan' THEN 1 ELSE 0 END) AS jan,
        SUM(CASE WHEN order_month = 'Feb' THEN 1 ELSE 0 END) AS feb,
        SUM(CASE WHEN order_month = 'Mar' THEN 1 ELSE 0 END) AS mar,
        SUM(CASE WHEN order_month = 'Apr' THEN 1 ELSE 0 END) AS apr,
        SUM(CASE WHEN order_month = 'May' THEN 1 ELSE 0 END) AS may,
        SUM(CASE WHEN order_month = 'Jun' THEN 1 ELSE 0 END) AS jun,
        SUM(CASE WHEN order_month = 'Jul' THEN 1 ELSE 0 END) AS jul,
        SUM(CASE WHEN order_month = 'Aug' THEN 1 ELSE 0 END) AS aug,
        SUM(CASE WHEN order_month = 'Sep' THEN 1 ELSE 0 END) AS sep,
        SUM(CASE WHEN order_month = 'Oct' THEN 1 ELSE 0 END) AS oct,
        SUM(CASE WHEN order_month = 'Nov' THEN 1 ELSE 0 END) AS nov,
        SUM(CASE WHEN order_month = 'Dec' THEN 1 ELSE 0 END) AS dec
    FROM order_details
    GROUP BY order_year
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 13
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 49.52
  duration_llm: 3.39
  prompt_tokens: 1560
  completion_tokens: 358
  total_tokens: 1918
  cost_input_EUR: 0.000203
  cost_output_EUR: 0.000179
  cost_total_EUR: 0.000382
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 16
  user_question: |
    For each customer located in the UNITED KINGDOM, compare their total spending in each quarter with the same quarter of the previous year.
    Calculate the year-over-year percentage change and round it to two decimal places.
    Return customer, year, quarter, total spend, and the percentage change.
    Only include cases where the percentage change is positive.
    List the top 20 customers by percentage growth, ordered descending.
  sql_query: |
    WITH customer_quarter AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name    AS customer_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM customer c
        JOIN orders o ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    yoy AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY customer_id, order_quarter
                ORDER BY order_year
            ) AS prev_year_amount
        FROM customer_quarter
    )
    SELECT TOP 20
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        CAST(
            100.0 * (total_amount - prev_year_amount) / NULLIF(prev_year_amount, 0)
            AS decimal(10,2)
        ) AS yoy_percent_change
    FROM yoy
    WHERE prev_year_amount IS NOT NULL
      AND (total_amount - prev_year_amount) > 0
    ORDER BY yoy_percent_change DESC;
  llm_sql_query: |-
    WITH customer_nation AS (
        SELECT c.c_custkey, c.c_name, n.n_name
        FROM customer c
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
    ),
    customer_spend AS (
        SELECT
            cn.c_custkey AS customer_id,
            cn.c_name AS customer_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(quarter, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_spend
        FROM customer_nation cn
        JOIN orders o ON cn.c_custkey = o.o_custkey
        GROUP BY cn.c_custkey, cn.c_name, YEAR(o.o_orderdate), DATEPART(quarter, o.o_orderdate)
    ),
    spend_with_prev AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_spend,
            LAG(total_spend) OVER (PARTITION BY customer_id, order_quarter ORDER BY order_year) AS prev_year_spend
        FROM customer_spend
    ),
    yoy_change AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_spend,
            100.0 * (total_spend - prev_year_spend) / NULLIF(prev_year_spend, 0) AS percentage_change
        FROM spend_with_prev
        WHERE prev_year_spend IS NOT NULL
    )
    SELECT TOP 20
        customer_name AS customer,
        order_year AS year,
        order_quarter AS quarter,
        total_spend,
        ROUND(percentage_change, 2) AS percentage_change
    FROM yoy_change
    WHERE percentage_change > 0
    ORDER BY percentage_change DESC;
  tables_used:
  - customer
  - orders
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 20
  columns: 5
  rows_equality: 1.0
  columns_equality: 0.67
  datasets_equality: 0.0
  duration_sql: 1.86
  duration_llm: 3.6
  prompt_tokens: 1745
  completion_tokens: 381
  total_tokens: 2126
  cost_input_EUR: 0.000227
  cost_output_EUR: 0.00019
  cost_total_EUR: 0.000417
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 17
  user_question: |
    Create a quarterly revenue pivot per region with columns Q1 through Q4, then calculate the absolute difference in revenue versus the previous quarter using LAG Function.
    Return region, year, quarter, revenue, and delta from the previous quarter, ordered by region, year, and quarter.
    Filter the data for orders placed between 1995 and 1997, and customers in the regions of EUROPE or AMERICA.
  sql_query: |
    WITH reg_qtr AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE o.o_orderdate BETWEEN '1995-01-01' AND '1997-12-31'
          AND (r.r_name = 'EUROPE' OR r.r_name = 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    lag_calc AS (
        SELECT
            region_id,
            region_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY region_id
                ORDER BY order_year, order_quarter
            ) AS prev_q_amount
        FROM reg_qtr
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        total_amount,
        total_amount - prev_q_amount AS delta_vs_prev_q
    FROM lag_calc
    ORDER BY region_name, order_year, order_quarter;
  llm_sql_query: |-
    WITH region_revenue AS (
        SELECT
            r.r_name AS region,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(quarter, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_revenue
        FROM orders o
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE o.o_orderdate BETWEEN '1995-01-01' AND '1997-12-31'
          AND r.r_name IN ('EUROPE', 'AMERICA')
        GROUP BY r.r_name, YEAR(o.o_orderdate), DATEPART(quarter, o.o_orderdate)
    ),
    quarterly_revenue AS (
        SELECT
            region,
            order_year,
            order_quarter,
            total_revenue,
            LAG(total_revenue, 1, 0) OVER (PARTITION BY region ORDER BY order_year, order_quarter) AS prev_quarter_revenue
        FROM region_revenue
    )
    SELECT
        region,
        order_year AS year,
        order_quarter AS quarter,
        total_revenue AS revenue,
        total_revenue - prev_quarter_revenue AS delta_vs_prev_q
    FROM quarterly_revenue
    ORDER BY region, year, quarter;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 16
  columns: 5
  rows_equality: 1.0
  columns_equality: 0.83
  datasets_equality: 0.0
  duration_sql: 2.09
  duration_llm: 3.06
  prompt_tokens: 1787
  completion_tokens: 295
  total_tokens: 2082
  cost_input_EUR: 0.000232
  cost_output_EUR: 0.000147
  cost_total_EUR: 0.00038
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 18
  user_question: |
    For each region and year, determine the percentage contribution with 2 decimals of every market segment to the total number of orders.
    Return region, year, market segment, total orders, and percent of total, ordered by region, year, and percent descending.
  sql_query: |
    WITH region_year_seg AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            c.c_mktsegment AS market_segment,
            COUNT(*) AS num_orders
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    )
    SELECT
        region_id,
        region_name,
        order_year,
        market_segment,
        num_orders,
        CAST(100.0 * num_orders / SUM(num_orders) OVER (PARTITION BY region_id, order_year) AS decimal(6,2)) AS pct_of_total
    FROM region_year_seg
    ORDER BY region_name, order_year, pct_of_total DESC;
  llm_sql_query: |-
    SELECT
        r.r_name AS region_name,
        YEAR(o.o_orderdate) AS order_year,
        c.c_mktsegment AS market_segment,
        COUNT(o.o_orderkey) AS total_orders,
        ROUND(100.0 * COUNT(o.o_orderkey) / SUM(COUNT(o.o_orderkey)) OVER (PARTITION BY r.r_name, YEAR(o.o_orderdate)), 2) AS percent_of_total
    FROM
        region r
    JOIN
        nation n ON r.r_regionkey = n.n_regionkey
    JOIN
        customer c ON n.n_nationkey = c.c_nationkey
    JOIN
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY
        r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    ORDER BY
        region_name, order_year, percent_of_total DESC;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 122
  columns: 5
  rows_equality: 1.0
  columns_equality: 0.67
  datasets_equality: 0.0
  duration_sql: 2.44
  duration_llm: 2.12
  prompt_tokens: 1755
  completion_tokens: 185
  total_tokens: 1940
  cost_input_EUR: 0.000228
  cost_output_EUR: 9.2e-05
  cost_total_EUR: 0.000321
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 19
  user_question: |
    For each nation in the region of EUROPE, and for each year based on the order date, find the top 3 suppliers by total quantity supplied.
    Include the nation, the supplier, the total quantity, and their rank.
    Order the data by nation name, year, and ranking.
  sql_query: |
    WITH supplier_qty AS (
        SELECT
            n.n_nationkey AS nation_id,
            n.n_name      AS nation_name,
            s.s_suppkey AS supplier_id,
            s.s_name    AS supplier_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM supplier s
        JOIN nation n ON n.n_nationkey = s.s_nationkey
        JOIN lineitem l ON l.l_suppkey = s.s_suppkey
        JOIN orders o ON o.o_orderkey = l.l_orderkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
        GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, YEAR(o.o_orderdate)
    ),
    ranked AS (
        SELECT
            nation_id,
            nation_name,
            supplier_id,
            supplier_name,
            order_year,
            total_quantity,
            DENSE_RANK() OVER (
                PARTITION BY nation_id, order_year
                ORDER BY total_quantity DESC
            ) AS ranking
        FROM supplier_qty
    )
    SELECT
        nation_id,
        nation_name,
        supplier_id,
        supplier_name,
        order_year,
        total_quantity,
        ranking
    FROM ranked
    WHERE ranking <= 3
    ORDER BY nation_name, order_year, ranking;
  llm_sql_query: |-
    WITH ranked_suppliers AS (
      SELECT
        n.n_name AS nation_name,
        s.s_name AS supplier_name,
        YEAR(o.o_orderdate) AS order_year,
        SUM(l.l_quantity) AS total_quantity,
        DENSE_RANK() OVER (PARTITION BY n.n_name, YEAR(o.o_orderdate) ORDER BY SUM(l.l_quantity) DESC) AS quantity_rank
      FROM orders o
      JOIN lineitem l ON o.o_orderkey = l.l_orderkey
      JOIN supplier s ON l.l_suppkey = s.s_suppkey
      JOIN nation n ON s.s_nationkey = n.n_nationkey
      JOIN region r ON n.n_regionkey = r.r_regionkey
      WHERE r.r_name = 'EUROPE'
      GROUP BY n.n_name, s.s_name, YEAR(o.o_orderdate)
    )
    SELECT
      nation_name,
      supplier_name,
      total_quantity,
      quantity_rank
    FROM ranked_suppliers
    WHERE quantity_rank <= 3
    ORDER BY nation_name, order_year, quantity_rank;
  tables_used:
  - supplier
  - nation
  - lineitem
  - orders
  - customer
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 105
  columns: 4
  rows_equality: 1.0
  columns_equality: 0.57
  datasets_equality: 0.0
  duration_sql: 5.63
  duration_llm: 2.26
  prompt_tokens: 2202
  completion_tokens: 221
  total_tokens: 2423
  cost_input_EUR: 0.000286
  cost_output_EUR: 0.00011
  cost_total_EUR: 0.000397
- iteration: '01'
  model_name: Llama-4-Maverick-17B-128E-Instruct-FP8
  question_number: 20
  user_question: |
    Monitor price variability by calculating the standard deviation with 4 decimals of order prices for each part type, year, and quarter.
    Return part type, year, quarter, count of the orders, and the standard deviation of prices, ordered by part type, year, and quarter ascending.
    Include only orders placed by customers from JAPAN.
  sql_query: |
    WITH price_data AS (
        SELECT
            p.p_type AS part_type,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            o.o_totalprice AS order_price
        FROM orders o
        JOIN lineitem l ON l.l_orderkey = o.o_orderkey
        JOIN part p ON p.p_partkey = l.l_partkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN nation n ON n.n_nationkey = c.c_nationkey
        WHERE n.n_name = 'JAPAN'
    )
    SELECT
        part_type,
        order_year,
        order_quarter,
        COUNT(*) AS num_orders,
        CAST(STDEV(order_price) AS decimal(15,4)) AS price_stddev
    FROM price_data
    GROUP BY part_type, order_year, order_quarter
    ORDER BY part_type, order_year, order_quarter;
  llm_sql_query: |-
    SELECT
        p.p_type AS part_type,
        YEAR(o.o_orderdate) AS order_year,
        DATEPART(quarter, o.o_orderdate) AS order_quarter,
        COUNT(DISTINCT o.o_orderkey) AS num_orders,
        ROUND(STDEV(l.l_extendedprice), 4) AS price_stddev
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN part p ON l.l_partkey = p.p_partkey
    WHERE n.n_name = 'JAPAN'
    GROUP BY p.p_type, YEAR(o.o_orderdate), DATEPART(quarter, o.o_orderdate)
    ORDER BY part_type, order_year, order_quarter;
  tables_used:
  - orders
  - lineitem
  - part
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 1501
  columns: 5
  rows_equality: 1.0
  columns_equality: 0.6
  datasets_equality: 0.0
  duration_sql: 4.9
  duration_llm: 2.27
  prompt_tokens: 2192
  completion_tokens: 177
  total_tokens: 2369
  cost_input_EUR: 0.000285
  cost_output_EUR: 8.8e-05
  cost_total_EUR: 0.000373
