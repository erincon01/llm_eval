questions:
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 1
  user_question: |
    Which customers from the 'BUILDING' market segment placed more than 10 orders in 1996? Order by total order value descending.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND YEAR(o.o_orderdate) = 1996
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY total_amount DESC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM
        customer c
    INNER JOIN
        orders o ON o.o_custkey = c.c_custkey
    WHERE
        c.c_mktsegment = 'BUILDING'
        AND EXTRACT(YEAR FROM o.o_orderdate) = 1996
    GROUP BY
        c.c_custkey,
        c.c_name
    HAVING
        COUNT(*) > 10
    ORDER BY
        total_amount DESC;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 24
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.23
  duration_llm: 4.44
  prompt_tokens: 1820
  completion_tokens: 128
  total_tokens: 1948
  cost_input_EUR: 0.000364
  cost_output_EUR: 0.0001
  cost_total_EUR: 0.000464
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 2
  user_question: |
    For each region, what is the average supplier account balance and how many suppliers are in each region? Order by average balance descending.
  sql_query: |
    SELECT
        r.r_regionkey AS region_id,
        r.r_name      AS region_name,
        AVG(s.s_acctbal) AS avg_balance,
        COUNT(s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_balance DESC;
  llm_sql_query: |-
    SELECT
        r.r_regionkey AS region_id,
        r.r_name    AS region_name,
        AVG(s.s_acctbal) AS avg_supplier_balance,
        COUNT(s.s_suppkey) AS num_suppliers
    FROM region r
    INNER JOIN nation n ON r.r_regionkey = n.n_regionkey
    INNER JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_supplier_balance DESC;
  tables_used:
  - region
  - nation
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.03
  duration_llm: 1.94
  prompt_tokens: 1729
  completion_tokens: 103
  total_tokens: 1832
  cost_input_EUR: 0.000346
  cost_output_EUR: 8.0e-05
  cost_total_EUR: 0.000426
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 3
  user_question: |
    List the top 5 parts by total quantity ordered across all years. Order by total quantity descending.
  sql_query: |
    SELECT
        p.p_partkey AS part_id,
        p.p_name    AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    LIMIT 5;
  llm_sql_query: |-
    SELECT
        p.p_partkey AS part_id,
        p.p_name AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM lineitem l
    INNER JOIN part p ON l.l_partkey = p.p_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    LIMIT 5;
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 33.08
  duration_llm: 1.55
  prompt_tokens: 2011
  completion_tokens: 71
  total_tokens: 2082
  cost_input_EUR: 0.000402
  cost_output_EUR: 5.5e-05
  cost_total_EUR: 0.000458
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 4
  user_question: |
    For each year from 1992 to 1994, identify the top 5 parts by total quantity ordered for customers from the region of ASIA. Order by year and total quantity descending.
  sql_query: |
    WITH yearly_totals AS (
        SELECT
            p.p_partkey AS part_id,
            p.p_name    AS part_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity,
            ROW_NUMBER() OVER (
                PARTITION BY YEAR(o.o_orderdate)
                ORDER BY SUM(l.l_quantity) DESC
            ) AS rn
        FROM part p
        JOIN lineitem l ON p.p_partkey = l.l_partkey
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        join region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'ASIA'
          AND YEAR(o.o_orderdate) BETWEEN 1992 AND 1994
        GROUP BY p.p_partkey, p.p_name, YEAR(o.o_orderdate)
    )
    SELECT
        part_id,
        part_name,
        order_year,
        total_quantity
    FROM yearly_totals
    WHERE rn <= 5
    ORDER BY order_year, total_quantity DESC;
  llm_sql_query: |-
    SELECT
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        p.p_partkey AS part_id,
        p.p_name AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM
        customer c
    INNER JOIN
        orders o ON o.o_custkey = c.c_custkey
    INNER JOIN
        lineitem l ON l.l_orderkey = o.o_orderkey
    INNER JOIN
        part p ON p.p_partkey = l.l_partkey
    INNER JOIN
        nation n ON n.n_nationkey = c.c_nationkey
    INNER JOIN
        region r ON r.r_regionkey = n.n_regionkey
    WHERE
        r.r_name = 'ASIA'
        AND EXTRACT(YEAR FROM o.o_orderdate) BETWEEN 1992 AND 1994
    GROUP BY
        EXTRACT(YEAR FROM o.o_orderdate),
        p.p_partkey,
        p.p_name
    ORDER BY
        order_year,
        total_quantity DESC
    LIMIT 20;
  tables_used:
  - part
  - lineitem
  - orders
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 20
  columns: 4
  rows_equality: 0.0
  columns_equality: 1.0
  datasets_equality: 0.33
  duration_sql: 7.6
  duration_llm: 1131.05
  prompt_tokens: 2339
  completion_tokens: 215
  total_tokens: 2554
  cost_input_EUR: 0.000468
  cost_output_EUR: 0.000168
  cost_total_EUR: 0.000635
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 5
  user_question: |
    For orders placed in 1994, how many unique suppliers provided parts of type 'SMALL PLATED STEEL' and size 4,
    and what was their average supply cost per supplier, weighted by available quantity? Order the results by supplier.
  sql_query: |
    SELECT
        l.l_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        COUNT(DISTINCT l.l_suppkey) AS num_suppliers,
        AVG(ps.ps_supplycost * ps.ps_availqty) AS avg_cost
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey
    JOIN part p ON l.l_partkey = p.p_partkey
    JOIN supplier s ON l.l_suppkey = s.s_suppkey
    WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
      AND p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
    GROUP BY l.l_suppkey, s.s_name
    ORDER BY s.s_name ASC;
  llm_sql_query: |-
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        COUNT(DISTINCT p.p_partkey) AS num_unique_parts,
        SUM(ps.ps_availqty * ps.ps_supplycost) / SUM(ps.ps_availqty) AS avg_supply_cost
    FROM
        supplier s
    INNER JOIN
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    INNER JOIN
        part p ON ps.ps_partkey = p.p_partkey
    INNER JOIN
        lineitem l ON p.p_partkey = l.l_partkey
    INNER JOIN
        orders o ON l.l_orderkey = o.o_orderkey
    WHERE
        o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
        AND p.p_type = 'SMALL PLATED STEEL'
        AND p.p_size = 4
    GROUP BY
        s.s_suppkey, s.s_name
    ORDER BY
        s.s_name;
  tables_used:
  - orders
  - lineitem
  - partsupp
  - part
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 942
  columns: 4
  rows_equality: 0.0
  columns_equality: 0.25
  datasets_equality: 0.0
  duration_sql: 1.48
  duration_llm: 2.59
  prompt_tokens: 2360
  completion_tokens: 212
  total_tokens: 2572
  cost_input_EUR: 0.000472
  cost_output_EUR: 0.000165
  cost_total_EUR: 0.000637
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 6
  user_question: |
    List the top 10 suppliers from GERMANY that supplied parts of type 'SMALL PLATED STEEL' and size 4.
    For each, calculate the total supply cost (supply cost x available quantity).
    Do not include the supplier's nation in the output. Order by total cost descending.
  sql_query: |
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
      AND n.n_name = 'GERMANY'
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_cost DESC
    LIMIT 10;
  llm_sql_query: |-
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM
        supplier s
    INNER JOIN
        partsupp ps ON s.s_suppkey = ps.ps_suppkey
    INNER JOIN
        part p ON ps.ps_partkey = p.p_partkey
    INNER JOIN
        nation n ON s.s_nationkey = n.n_nationkey
    INNER JOIN
        region r ON n.n_regionkey = r.r_regionkey
    WHERE
        n.n_name = 'GERMANY'
        AND p.p_type = 'SMALL PLATED STEEL'
        AND p.p_size = 4
    GROUP BY
        s.s_suppkey, s.s_name
    ORDER BY
        total_supply_cost DESC
    LIMIT 10;
  tables_used:
  - supplier
  - partsupp
  - nation
  - part
  executed: true
  llm_sql_query_changed: false
  rows: 10
  columns: 3
  rows_equality: 1.0
  columns_equality: 0.67
  datasets_equality: 0.0
  duration_sql: 0.08
  duration_llm: 2.2
  prompt_tokens: 1900
  completion_tokens: 183
  total_tokens: 2083
  cost_input_EUR: 0.00038
  cost_output_EUR: 0.000143
  cost_total_EUR: 0.000523
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 7
  user_question: |
    Find the average order price (rounded to 2 decimals) and the total number of orders per year between 1992 and 1998, inclusive.
    Group by the year of the order date and return the results ordered by year ascending.
    Return the year, the total number of orders, and the average price.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        AVG(o_totalprice) AS avg_price,
        COUNT(*) AS num_orders
    FROM orders
    WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1998
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        COUNT(o.o_orderkey) AS num_orders,
        ROUND(AVG(o.o_totalprice), 2) AS avg_order_price
    FROM orders o
    WHERE EXTRACT(YEAR FROM o.o_orderdate) BETWEEN 1992 AND 1998
    GROUP BY EXTRACT(YEAR FROM o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 7
  columns: 3
  rows_equality: 1.0
  columns_equality: 0.67
  datasets_equality: 0.0
  duration_sql: 0.06
  duration_llm: 1.31
  prompt_tokens: 1758
  completion_tokens: 88
  total_tokens: 1846
  cost_input_EUR: 0.000352
  cost_output_EUR: 6.9e-05
  cost_total_EUR: 0.00042
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 8
  user_question: |
    Which three nations had the highest total order amount in 1997? Also return the number of orders per nation.
    Sort by total amount descending and limit the result to 3 rows
  sql_query: |
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name      AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE YEAR(o.o_orderdate) = 1997
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
    LIMIT 3;
  llm_sql_query: |-
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name AS nation_name,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM
        nation n
    INNER JOIN
        customer c ON c.c_nationkey = n.n_nationkey
    INNER JOIN
        orders o ON o.o_custkey = c.c_custkey
    WHERE
        EXTRACT(YEAR FROM o.o_orderdate) = 1997
    GROUP BY
        n.n_nationkey, n.n_name
    ORDER BY
        total_amount DESC
    LIMIT 3;
  tables_used:
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.17
  duration_llm: 1.66
  prompt_tokens: 1878
  completion_tokens: 127
  total_tokens: 2005
  cost_input_EUR: 0.000376
  cost_output_EUR: 9.9e-05
  cost_total_EUR: 0.000475
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 9
  user_question: |
    For each year, list the number of sales and the total amount for items ordered in December for customers based in the region of EUROPE whose market segment is 'AUTOMOBILE', ordered by year ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'EUROPE'
      AND c.c_mktsegment = 'AUTOMOBILE'
      AND MONTH(o.o_orderdate) = 12
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM
        orders o
    INNER JOIN
        customer c ON o.o_custkey = c.c_custkey
    INNER JOIN
        nation n ON c.c_nationkey = n.n_nationkey
    INNER JOIN
        region r ON n.n_regionkey = r.r_regionkey
    WHERE
        r.r_name = 'EUROPE'
        AND c.c_mktsegment = 'AUTOMOBILE'
        AND EXTRACT(MONTH FROM o.o_orderdate) = 12
    GROUP BY
        EXTRACT(YEAR FROM o.o_orderdate)
    ORDER BY
        order_year ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 6
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.12
  duration_llm: 1.94
  prompt_tokens: 1918
  completion_tokens: 161
  total_tokens: 2079
  cost_input_EUR: 0.000384
  cost_output_EUR: 0.000126
  cost_total_EUR: 0.000509
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 10
  user_question: |
    List customer data and his account balance for customers that have placed more than 10 orders and whose individual account balance is greater than 6000.
    Count the number of orders per customer too, order the data by customer name.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        c.c_acctbal AS account_balance
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10 AND c.c_acctbal > 6000
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        c.c_acctbal AS account_balance,
        COUNT(o.o_orderkey) AS num_orders
    FROM
        customer c
    INNER JOIN
        orders o ON c.c_custkey = o.o_custkey
    GROUP BY
        c.c_custkey,
        c.c_name,
        c.c_acctbal
    HAVING
        COUNT(o.o_orderkey) > 10 AND
        c.c_acctbal > 6000
    ORDER BY
        c.c_name;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: true
  rows: 255868
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.25
  duration_llm: 1.68
  prompt_tokens: 1839
  completion_tokens: 129
  total_tokens: 1968
  cost_input_EUR: 0.000368
  cost_output_EUR: 0.000101
  cost_total_EUR: 0.000468
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 11
  user_question: |
    Which part types are most commonly sold by quantity, and how many units have been sold for each?
    List only the first 15 part types and order the data by quantity sold descending.
  sql_query: |
    SELECT
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity DESC
    LIMIT 15;
  llm_sql_query: |-
    SELECT
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity_sold
    FROM lineitem l
    INNER JOIN part p ON l.l_partkey = p.p_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity_sold DESC
    LIMIT 15;
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 2
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 3.56
  duration_llm: 1.1
  prompt_tokens: 2029
  completion_tokens: 61
  total_tokens: 2090
  cost_input_EUR: 0.000406
  cost_output_EUR: 4.8e-05
  cost_total_EUR: 0.000453
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 12
  user_question: |
    How many orders had a total price above 100000 and were placed before 1995 per year?
    Return the number of orders and the order year. Order by year ascending.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders
    WHERE o_totalprice > 100000
      AND o_orderdate < '1995-01-01'
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        COUNT(o.o_orderkey) AS num_orders
    FROM orders o
    WHERE o.o_totalprice > 100000
      AND o.o_orderdate < DATE '1995-01-01'
    GROUP BY EXTRACT(YEAR FROM o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 2
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.09
  duration_llm: 1.23
  prompt_tokens: 1731
  completion_tokens: 77
  total_tokens: 1808
  cost_input_EUR: 0.000346
  cost_output_EUR: 6.0e-05
  cost_total_EUR: 0.000406
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 13
  user_question: |
    Which customers placed orders in both 1994 and 1995?
    For each, return the number of orders placed in 1994 and the number in 1995.
    Show one row per customer. Order the results by customer name ascending
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) AS num_orders_1995
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) > 0
       AND SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) > 0
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        COUNT(CASE WHEN EXTRACT(YEAR FROM o.o_orderdate) = 1994 THEN o.o_orderkey END) AS num_orders_1994,
        COUNT(CASE WHEN EXTRACT(YEAR FROM o.o_orderdate) = 1995 THEN o.o_orderkey END) AS num_orders_1995
    FROM customer c
    INNER JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE EXTRACT(YEAR FROM o.o_orderdate) IN (1994, 1995)
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(CASE WHEN EXTRACT(YEAR FROM o.o_orderdate) = 1994 THEN o.o_orderkey END) > 0
       AND COUNT(CASE WHEN EXTRACT(YEAR FROM o.o_orderdate) = 1995 THEN o.o_orderkey END) > 0
    ORDER BY c.c_name ASC;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: true
  rows: 758246
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 1.54
  duration_llm: 2.37
  prompt_tokens: 1843
  completion_tokens: 213
  total_tokens: 2056
  cost_input_EUR: 0.000369
  cost_output_EUR: 0.000166
  cost_total_EUR: 0.000535
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 14
  user_question: |
    How many orders have been made per month in year 1992 by customers in AMERICA?
    Order by year, and month ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(o.o_orderkey) AS num_orders
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'AMERICA'
      AND YEAR(o.o_orderdate) = 1992
    GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_month ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        EXTRACT(MONTH FROM o.o_orderdate) AS order_month,
        COUNT(o.o_orderkey) AS num_orders
    FROM
        orders o
    INNER JOIN
        customer c ON o.o_custkey = c.c_custkey
    INNER JOIN
        nation n ON c.c_nationkey = n.n_nationkey
    INNER JOIN
        region r ON n.n_regionkey = r.r_regionkey
    WHERE
        r.r_name = 'AMERICA'
        AND EXTRACT(YEAR FROM o.o_orderdate) = 1992
    GROUP BY
        EXTRACT(YEAR FROM o.o_orderdate),
        EXTRACT(MONTH FROM o.o_orderdate)
    ORDER BY
        order_year,
        order_month ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 12
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.11
  duration_llm: 2.18
  prompt_tokens: 1906
  completion_tokens: 172
  total_tokens: 2078
  cost_input_EUR: 0.000381
  cost_output_EUR: 0.000134
  cost_total_EUR: 0.000515
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 15
  user_question: |
    Show the number of orders per year between 1992 and 1995, with one column per each 3-letter month abbreviation (e.g., Jan, Feb, Mar) ordered by year ascending.
  sql_query: |
    SELECT
        EXTRACT(YEAR FROM o_orderdate) AS order_year,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jan' THEN 1 ELSE 0 END) AS Jan,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Feb' THEN 1 ELSE 0 END) AS Feb,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Mar' THEN 1 ELSE 0 END) AS Mar,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Apr' THEN 1 ELSE 0 END) AS Apr,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'May' THEN 1 ELSE 0 END) AS May,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jun' THEN 1 ELSE 0 END) AS Jun,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jul' THEN 1 ELSE 0 END) AS Jul,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Aug' THEN 1 ELSE 0 END) AS Aug,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Sep' THEN 1 ELSE 0 END) AS Sep,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Oct' THEN 1 ELSE 0 END) AS Oct,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Nov' THEN 1 ELSE 0 END) AS Nov,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Dec' THEN 1 ELSE 0 END) AS Dec
    FROM orders
    WHERE EXTRACT(YEAR FROM o_orderdate) BETWEEN 1992 AND 1995
    GROUP BY order_year
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 1 THEN 1 END) AS jan,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 2 THEN 1 END) AS feb,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 3 THEN 1 END) AS mar,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 4 THEN 1 END) AS apr,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 5 THEN 1 END) AS may,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 6 THEN 1 END) AS jun,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 7 THEN 1 END) AS jul,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 8 THEN 1 END) AS aug,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 9 THEN 1 END) AS sep,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 10 THEN 1 END) AS oct,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 11 THEN 1 END) AS nov,
        COUNT(CASE WHEN EXTRACT(MONTH FROM o.o_orderdate) = 12 THEN 1 END) AS dec
    FROM orders o
    WHERE EXTRACT(YEAR FROM o.o_orderdate) BETWEEN 1992 AND 1995
    GROUP BY EXTRACT(YEAR FROM o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 13
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.1
  duration_llm: 3.82
  prompt_tokens: 1735
  completion_tokens: 384
  total_tokens: 2119
  cost_input_EUR: 0.000347
  cost_output_EUR: 0.0003
  cost_total_EUR: 0.000647
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 16
  user_question: |
    For each customer located in the UNITED KINGDOM, compare their total spending in each quarter with the same quarter of the previous year.
    Calculate the year-over-year percentage change and round it to two decimal places.
    Return customer, year, quarter, total spend, and the percentage change.
    Only include cases where the percentage change is positive.
    List the top 20 customers by percentage growth, ordered descending.
  sql_query: |
    WITH customer_quarter AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name AS customer_name,
            EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
            EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM customer c
        JOIN orders o ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, EXTRACT(YEAR FROM o.o_orderdate), EXTRACT(QUARTER FROM o.o_orderdate)
    ),
    yoy AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY customer_id, order_quarter
                ORDER BY order_year
            ) AS prev_year_amount
        FROM customer_quarter
    )
    SELECT
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        CAST(
            100.0 * (total_amount - prev_year_amount) / NULLIF(prev_year_amount, 0)
            AS DECIMAL(10,2)
        ) AS yoy_percent_change
    FROM yoy
    WHERE prev_year_amount IS NOT NULL
      AND (total_amount - prev_year_amount) > 0
    ORDER BY yoy_percent_change DESC
    LIMIT 20;
  llm_sql_query: |-
    WITH
      customer_spend AS (
        SELECT
          c.c_custkey AS customer_id,
          c.c_name AS customer_name,
          EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
          EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
          SUM(o.o_totalprice) AS total_spend
        FROM
          customer c
        INNER JOIN
          orders o ON c.c_custkey = o.o_custkey
        INNER JOIN
          nation n ON c.c_nationkey = n.n_nationkey
        WHERE
          n.n_name = 'UNITED KINGDOM'
        GROUP BY
          c.c_custkey, c.c_name, EXTRACT(YEAR FROM o.o_orderdate), EXTRACT(QUARTER FROM o.o_orderdate)
      ),
      spend_with_lag AS (
        SELECT
          customer_id,
          customer_name,
          order_year,
          order_quarter,
          total_spend,
          LAG(total_spend) OVER (PARTITION BY customer_id, order_quarter ORDER BY order_year) AS prev_year_spend
        FROM
          customer_spend
      ),
      spend_change AS (
        SELECT
          customer_id,
          customer_name,
          order_year,
          order_quarter,
          total_spend,
          ROUND(100.0 * (total_spend - prev_year_spend) / NULLIF(prev_year_spend, 0), 2) AS pct_change
        FROM
          spend_with_lag
      )
    SELECT
      customer_id,
      customer_name,
      order_year,
      order_quarter,
      total_spend,
      pct_change
    FROM
      spend_change
    WHERE
      pct_change > 0
    ORDER BY
      pct_change DESC
    LIMIT 20;
  tables_used:
  - customer
  - orders
  - nation
  executed: true
  llm_sql_query_changed: true
  rows: 20
  columns: 6
  rows_equality: 1.0
  columns_equality: 0.67
  datasets_equality: 0.0
  duration_sql: 0.6
  duration_llm: 3.79
  prompt_tokens: 1920
  completion_tokens: 378
  total_tokens: 2298
  cost_input_EUR: 0.000384
  cost_output_EUR: 0.000295
  cost_total_EUR: 0.000679
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 17
  user_question: |
    Create a quarterly revenue pivot per region with columns Q1 through Q4, then calculate the absolute difference in revenue versus the previous quarter using LAG Function.
    Return region, year, quarter, revenue, and delta from the previous quarter, ordered by region, year, and quarter.
    Filter the data for orders placed between 1995 and 1997, and customers in the regions of EUROPE or AMERICA.
  sql_query: |
    WITH reg_qtr AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name AS region_name,
            EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
            EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE o.o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1997-12-31'
          AND (r.r_name = 'EUROPE' OR r.r_name = 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, EXTRACT(YEAR FROM o.o_orderdate), EXTRACT(QUARTER FROM o.o_orderdate)
    ),
    lag_calc AS (
        SELECT
            region_id,
            region_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY region_id
                ORDER BY order_year, order_quarter
            ) AS prev_q_amount
        FROM reg_qtr
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        total_amount,
        total_amount - prev_q_amount AS delta_vs_prev_q
    FROM lag_calc
    ORDER BY region_name, order_year, order_quarter;
  llm_sql_query: |-
    WITH quarterly_revenue AS (
      SELECT
        r.r_regionkey AS region_id,
        r.r_name    AS region_name,
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
        SUM(o.o_totalprice) AS revenue
      FROM orders o
      INNER JOIN customer c ON o.o_custkey = c.c_custkey
      INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
      INNER JOIN region r ON n.n_regionkey = r.r_regionkey
      WHERE o.o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1997-12-31'
        AND r.r_name IN ('EUROPE', 'AMERICA')
      GROUP BY r.r_regionkey, r.r_name, EXTRACT(YEAR FROM o.o_orderdate), EXTRACT(QUARTER FROM o.o_orderdate)
    ),
    pivot_revenue AS (
      SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        revenue,
        LAG(revenue, 1) OVER (PARTITION BY region_id, order_year ORDER BY order_quarter) AS prev_quarter_revenue
      FROM quarterly_revenue
    )
    SELECT
      region_name AS region,
      order_year AS year,
      order_quarter AS quarter,
      revenue,
      revenue - prev_quarter_revenue AS delta_from_prev_quarter
    FROM pivot_revenue
    ORDER BY region_name, order_year, order_quarter;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: true
  rows: 24
  columns: 5
  rows_equality: 1.0
  columns_equality: 0.67
  datasets_equality: 0.0
  duration_sql: 0.21
  duration_llm: 3.71
  prompt_tokens: 1962
  completion_tokens: 329
  total_tokens: 2291
  cost_input_EUR: 0.000392
  cost_output_EUR: 0.000257
  cost_total_EUR: 0.000649
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 18
  user_question: |
    For each region and year, determine the percentage contribution with 2 decimals of every market segment to the total number of orders.
    Return region, year, market segment, total orders, and percent of total, ordered by region, year, and percent descending.
  sql_query: |
    WITH region_year_seg AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            c.c_mktsegment AS market_segment,
            COUNT(*) AS num_orders
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    )
    SELECT
        region_id,
        region_name,
        order_year,
        market_segment,
        num_orders,
        CAST(100.0 * num_orders / SUM(num_orders) OVER (PARTITION BY region_id, order_year) AS decimal(6,2)) AS pct_of_total
    FROM region_year_seg
    ORDER BY region_name, order_year, pct_of_total DESC;
  llm_sql_query: |-
    WITH region_market_segment_orders AS (
      SELECT
        r.r_regionkey AS region_id,
        r.r_name    AS region_name,
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        c.c_mktsegment AS market_segment,
        COUNT(*)    AS total_orders
      FROM
        region r
      INNER JOIN
        nation n ON r.r_regionkey = n.n_regionkey
      INNER JOIN
        customer c ON n.n_nationkey = c.c_nationkey
      INNER JOIN
        orders o ON c.c_custkey = o.o_custkey
      GROUP BY
        r.r_regionkey,
        r.r_name,
        EXTRACT(YEAR FROM o.o_orderdate),
        c.c_mktsegment
    ),
    total_region_market_segment_orders AS (
      SELECT
        region_id,
        region_name,
        order_year,
        SUM(total_orders) AS total_orders_region_year
      FROM
        region_market_segment_orders
      GROUP BY
        region_id,
        region_name,
        order_year
    )
    SELECT
      rmo.region_name AS region,
      rmo.order_year  AS year,
      rmo.market_segment,
      rmo.total_orders,
      ROUND(100.0 * rmo.total_orders / tro.total_orders_region_year, 2) AS percent_of_total
    FROM
      region_market_segment_orders rmo
    INNER JOIN
      total_region_market_segment_orders tro
        ON rmo.region_id = tro.region_id
        AND rmo.region_name = tro.region_name
        AND rmo.order_year = tro.order_year
    ORDER BY
      rmo.region_name,
      rmo.order_year,
      percent_of_total DESC;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: true
  rows: 175
  columns: 5
  rows_equality: 1.0
  columns_equality: 0.67
  datasets_equality: 0.0
  duration_sql: 0.6
  duration_llm: 3.69
  prompt_tokens: 1930
  completion_tokens: 363
  total_tokens: 2293
  cost_input_EUR: 0.000386
  cost_output_EUR: 0.000283
  cost_total_EUR: 0.000669
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 19
  user_question: |
    For each nation in the region of EUROPE, and for each year based on the order date, find the top 3 suppliers by total quantity supplied.
    Include the nation, the supplier, the total quantity, and their rank.
    Order the data by nation name, year, and ranking.
  sql_query: |
    WITH supplier_qty AS (
        SELECT
            n.n_nationkey AS nation_id,
            n.n_name      AS nation_name,
            s.s_suppkey AS supplier_id,
            s.s_name    AS supplier_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM supplier s
        JOIN nation n ON n.n_nationkey = s.s_nationkey
        JOIN lineitem l ON l.l_suppkey = s.s_suppkey
        JOIN orders o ON o.o_orderkey = l.l_orderkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
        GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, YEAR(o.o_orderdate)
    ),
    ranked AS (
        SELECT
            nation_id,
            nation_name,
            supplier_id,
            supplier_name,
            order_year,
            total_quantity,
            DENSE_RANK() OVER (
                PARTITION BY nation_id, order_year
                ORDER BY total_quantity DESC
            ) AS ranking
        FROM supplier_qty
    )
    SELECT
        nation_id,
        nation_name,
        supplier_id,
        supplier_name,
        order_year,
        total_quantity,
        ranking
    FROM ranked
    WHERE ranking <= 3
    ORDER BY nation_name, order_year, ranking;
  llm_sql_query: |-
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name AS nation_name,
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        SUM(l.l_quantity) AS total_quantity,
        DENSE_RANK() OVER (PARTITION BY n.n_nationkey, EXTRACT(YEAR FROM o.o_orderdate) ORDER BY SUM(l.l_quantity) DESC) AS supplier_rank
    FROM
        nation n
    INNER JOIN
        supplier s ON s.s_nationkey = n.n_nationkey
    INNER JOIN
        lineitem l ON l.l_suppkey = s.s_suppkey
    INNER JOIN
        orders o ON o.o_orderkey = l.l_orderkey
    INNER JOIN
        region r ON r.r_regionkey = n.n_regionkey
    WHERE
        r.r_name = 'EUROPE'
    GROUP BY
        n.n_nationkey,
        n.n_name,
        s.s_suppkey,
        s.s_name,
        EXTRACT(YEAR FROM o.o_orderdate)
    ORDER BY
        n.n_name,
        EXTRACT(YEAR FROM o.o_orderdate),
        supplier_rank
    LIMIT 1000;
  tables_used:
  - supplier
  - nation
  - lineitem
  - orders
  - customer
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 1000
  columns: 7
  rows_equality: 0.0
  columns_equality: 1.0
  datasets_equality: 0.03
  duration_sql: 6.84
  duration_llm: 2.9
  prompt_tokens: 2377
  completion_tokens: 267
  total_tokens: 2644
  cost_input_EUR: 0.000475
  cost_output_EUR: 0.000208
  cost_total_EUR: 0.000684
- iteration: '01'
  model_name: Llama-4-Scout-17B-16E-Instruct
  question_number: 20
  user_question: |
    Monitor price variability by calculating the standard deviation with 4 decimals of order prices for each part type, year, and quarter.
    Return part type, year, quarter, count of the orders, and the standard deviation of prices, ordered by part type, year, and quarter ascending.
    Include only orders placed by customers from JAPAN.
  sql_query: |
    WITH price_data AS (
      SELECT
          p.p_type AS part_type,
          EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
          EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
          o.o_totalprice AS order_price
      FROM orders o
      JOIN lineitem l ON l.l_orderkey = o.o_orderkey
      JOIN part p ON p.p_partkey = l.l_partkey
      JOIN customer c ON c.c_custkey = o.o_custkey
      JOIN nation n ON n.n_nationkey = c.c_nationkey
      WHERE n.n_name = 'JAPAN'
    )
    SELECT
        part_type,
        order_year,
        order_quarter,
        COUNT(*) AS num_orders,
        CAST(STDDEV_SAMP(order_price) AS DECIMAL(15,4)) AS price_stddev
    FROM price_data
    GROUP BY part_type, order_year, order_quarter
    ORDER BY part_type, order_year, order_quarter;
  llm_sql_query: |-
    SELECT
        p.p_type AS part_type,
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
        COUNT(*) AS num_orders,
        ROUND(STDEV(o.o_totalprice), 4) AS price_stddev
    FROM
        orders o
    INNER JOIN
        customer c ON o.o_custkey = c.c_custkey
    INNER JOIN
        nation n ON c.c_nationkey = n.n_nationkey
    INNER JOIN
        lineitem l ON o.o_orderkey = l.l_orderkey
    INNER JOIN
        part p ON l.l_partkey = p.p_partkey
    WHERE
        n.n_name = 'JAPAN'
    GROUP BY
        p.p_type,
        EXTRACT(YEAR FROM o.o_orderdate),
        EXTRACT(QUARTER FROM o.o_orderdate)
    ORDER BY
        p.p_type,
        EXTRACT(YEAR FROM o.o_orderdate),
        EXTRACT(QUARTER FROM o.o_orderdate) ASC;
  tables_used:
  - orders
  - lineitem
  - part
  - customer
  - nation
  executed: false
  llm_sql_query_changed: false
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 2.46
  prompt_tokens: 2367
  completion_tokens: 221
  total_tokens: 2588
  cost_input_EUR: 0.000473
  cost_output_EUR: 0.000172
  cost_total_EUR: 0.000646
