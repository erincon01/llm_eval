questions:
- iteration: ''
  model_name: ''
  question_number: 1
  user_question: |
    Which customers from the 'BUILDING' market segment placed more than 10 orders in 1996? Order by total order value descending.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND YEAR(o.o_orderdate) = 1996
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY total_amount DESC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON o.o_custkey = c.c_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND o.o_orderdate BETWEEN '1996-01-01' AND '1996-12-31'
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(*) > 10
    ORDER BY total_amount DESC
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.48
  duration_llm: 4.55
  prompt_tokens: 1622
  completion_tokens: 119
  total_tokens: 2354
  cost_input_EUR: 0.000405
  cost_output_EUR: 0.000151
  cost_total_EUR: 0.000557
- iteration: ''
  model_name: ''
  question_number: 2
  user_question: |
    For each region, what is the average supplier account balance and how many suppliers are in each region? Order by average balance descending.
  sql_query: |
    SELECT
        r.r_regionkey AS region_id,
        r.r_name      AS region_name,
        AVG(s.s_acctbal) AS avg_balance,
        COUNT(s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_balance DESC;
  llm_sql_query: |-
    SELECT
        r.r_regionkey AS region_id,
        r.r_name AS region_name,
        AVG(s.s_acctbal) AS avg_account_balance,
        COUNT(DISTINCT s.s_suppkey) AS num_suppliers
    FROM region r
    INNER JOIN nation n ON r.r_regionkey = n.n_regionkey
    INNER JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_account_balance DESC;
  tables_used:
  - region
  - nation
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.24
  duration_llm: 7.2
  prompt_tokens: 1532
  completion_tokens: 103
  total_tokens: 2681
  cost_input_EUR: 0.000383
  cost_output_EUR: 0.000131
  cost_total_EUR: 0.000514
- iteration: ''
  model_name: ''
  question_number: 3
  user_question: |
    List the top 5 parts by total quantity ordered across all years. Order by total quantity descending.
  sql_query: |
    SELECT
        p.p_partkey AS part_id,
        p.p_name    AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 5
        p.p_partkey AS part_id,
        p.p_name AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON l.l_partkey = p.p_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC;
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 13.7
  duration_llm: 8.82
  prompt_tokens: 1810
  completion_tokens: 71
  total_tokens: 3072
  cost_input_EUR: 0.000452
  cost_output_EUR: 9.0e-05
  cost_total_EUR: 0.000543
- iteration: ''
  model_name: ''
  question_number: 4
  user_question: |
    For each year from 1992 to 1994, identify the top 5 parts by total quantity ordered for customers from the region of ASIA. Order by year and total quantity descending.
  sql_query: |
    WITH yearly_totals AS (
        SELECT
            p.p_partkey AS part_id,
            p.p_name    AS part_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity,
            ROW_NUMBER() OVER (
                PARTITION BY YEAR(o.o_orderdate)
                ORDER BY SUM(l.l_quantity) DESC
            ) AS rn
        FROM part p
        JOIN lineitem l ON p.p_partkey = l.l_partkey
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        join region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'ASIA'
          AND YEAR(o.o_orderdate) BETWEEN 1992 AND 1994
        GROUP BY p.p_partkey, p.p_name, YEAR(o.o_orderdate)
    )
    SELECT
        part_id,
        part_name,
        order_year,
        total_quantity
    FROM yearly_totals
    WHERE rn <= 5
    ORDER BY order_year, total_quantity DESC;
  llm_sql_query: |-
    WITH PartQuantity AS (
        SELECT
            YEAR(o.o_orderdate) AS order_year,
            p.p_partkey AS part_id,
            p.p_name AS part_name,
            SUM(l.l_quantity) AS total_quantity
        FROM lineitem l
        INNER JOIN orders o ON l.l_orderkey = o.o_orderkey
        INNER JOIN customer c ON o.o_custkey = c.c_custkey
        INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
        INNER JOIN region r ON n.n_regionkey = r.r_regionkey
        INNER JOIN part p ON l.l_partkey = p.p_partkey
        WHERE r.r_name = 'ASIA'
          AND o.o_orderdate BETWEEN '1992-01-01' AND '1994-12-31'
        GROUP BY YEAR(o.o_orderdate), p.p_partkey, p.p_name
    ),
    RankedParts AS (
        SELECT
            part_id,
            part_name,
            order_year,
            total_quantity,
            ROW_NUMBER() OVER (PARTITION BY order_year ORDER BY total_quantity DESC) AS rn
        FROM PartQuantity
    )
    SELECT
        part_id,
        part_name,
        order_year,
        total_quantity
    FROM RankedParts
    WHERE rn <= 5
    ORDER BY order_year ASC, total_quantity DESC;
  tables_used:
  - part
  - lineitem
  - orders
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 5.56
  duration_llm: 21.97
  prompt_tokens: 2137
  completion_tokens: 278
  total_tokens: 6108
  cost_input_EUR: 0.000534
  cost_output_EUR: 0.000353
  cost_total_EUR: 0.000887
- iteration: ''
  model_name: ''
  question_number: 5
  user_question: |
    For orders placed in 1994, how many unique suppliers provided parts of type 'SMALL PLATED STEEL' and size 4,
    and what was their average supply cost per supplier, weighted by available quantity? Order the results by supplier.
  sql_query: |
    SELECT
        l.l_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        COUNT(DISTINCT l.l_suppkey) AS num_suppliers,
        AVG(ps.ps_supplycost * ps.ps_availqty) AS avg_cost
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey
    JOIN part p ON l.l_partkey = p.p_partkey
    JOIN supplier s ON l.l_suppkey = s.s_suppkey
    WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
      AND p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
    GROUP BY l.l_suppkey, s.s_name
    ORDER BY s.s_name ASC;
  llm_sql_query: |-
    WITH provided_suppliers AS (
        SELECT DISTINCT s_suppkey = l.l_suppkey
        FROM lineitem l
        INNER JOIN orders o ON l.l_orderkey = o.o_orderkey
        INNER JOIN part p ON l.l_partkey = p.p_partkey
        WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
          AND p.p_type = 'SMALL PLATED STEEL'
          AND p.p_size = 4
    )
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) / NULLIF(SUM(ps.ps_availqty), 0) AS weighted_avg_supply_cost
    FROM supplier s
    INNER JOIN provided_suppliers psupp ON s.s_suppkey = psupp.s_suppkey
    INNER JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    INNER JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_type = 'SMALL PLATED STEEL' AND p.p_size = 4
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY s.s_name;
  tables_used:
  - orders
  - lineitem
  - partsupp
  - part
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 123
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 0.5
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 3.54
  duration_llm: 30.96
  prompt_tokens: 2155
  completion_tokens: 253
  total_tokens: 7276
  cost_input_EUR: 0.000539
  cost_output_EUR: 0.000321
  cost_total_EUR: 0.00086
- iteration: ''
  model_name: ''
  question_number: 6
  user_question: |
    List the top 10 suppliers from GERMANY that supplied parts of type 'SMALL PLATED STEEL' and size 4.
    For each, calculate the total supply cost (supply cost x available quantity).
    Do not include the supplier's nation in the output. Order by total cost descending.
  sql_query: |
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
      AND n.n_name = 'GERMANY'
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_cost DESC
    OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 10
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    INNER JOIN partsupp ps ON ps.ps_suppkey = s.s_suppkey
    INNER JOIN part p ON p.p_partkey = ps.ps_partkey
    INNER JOIN nation n ON n.n_nationkey = s.s_nationkey
    WHERE n.n_name = 'GERMANY'
    AND p.p_type = 'SMALL PLATED STEEL'
    AND p.p_size = 4
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_supply_cost DESC;
  tables_used:
  - supplier
  - partsupp
  - nation
  - part
  executed: true
  llm_sql_query_changed: false
  rows: 10
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.44
  duration_llm: 10.86
  prompt_tokens: 1700
  completion_tokens: 148
  total_tokens: 3592
  cost_input_EUR: 0.000425
  cost_output_EUR: 0.000188
  cost_total_EUR: 0.000613
- iteration: ''
  model_name: ''
  question_number: 7
  user_question: |
    Find the average order price (rounded to 2 decimals) and the total number of orders per year between 1992 and 1998, inclusive.
    Group by the year of the order date and return the results ordered by year ascending.
    Return the year, the total number of orders, and the average price.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        AVG(o_totalprice) AS avg_price,
        COUNT(*) AS num_orders
    FROM orders
    WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1998
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        ROUND(AVG(o.o_totalprice), 2) AS avg_price
    FROM
        orders o
    WHERE
        o_orderdate BETWEEN '1992-01-01' AND '1998-12-31'
    GROUP BY
        YEAR(o_orderdate)
    ORDER BY
        order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 7
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 2.02
  duration_llm: 8.28
  prompt_tokens: 1560
  completion_tokens: 83
  total_tokens: 2989
  cost_input_EUR: 0.00039
  cost_output_EUR: 0.000105
  cost_total_EUR: 0.000495
- iteration: ''
  model_name: ''
  question_number: 8
  user_question: |
    Which three nations had the highest total order amount in 1997? Also return the number of orders per nation.
    Sort by total amount descending and limit the result to 3 rows
  sql_query: |
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name      AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE YEAR(o.o_orderdate) = 1997
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
    OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 3
        n.n_nationkey AS nation_id,
        n.n_name AS nation_name,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    INNER JOIN customer c ON n.n_nationkey = c.c_nationkey
    INNER JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC;
  tables_used:
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.72
  duration_llm: 10.16
  prompt_tokens: 1680
  completion_tokens: 121
  total_tokens: 3309
  cost_input_EUR: 0.00042
  cost_output_EUR: 0.000154
  cost_total_EUR: 0.000574
- iteration: ''
  model_name: ''
  question_number: 9
  user_question: |
    For each year, list the number of sales and the total amount for items ordered in December for customers based in the region of EUROPE whose market segment is 'AUTOMOBILE', ordered by year ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'EUROPE'
      AND c.c_mktsegment = 'AUTOMOBILE'
      AND MONTH(o.o_orderdate) = 12
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    INNER JOIN customer c ON o.o_custkey = c.c_custkey
    INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
    INNER JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE MONTH(o.o_orderdate) = 12
      AND r.r_name = 'EUROPE'
      AND c.c_mktsegment = 'AUTOMOBILE'
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.87
  duration_llm: 17.14
  prompt_tokens: 1720
  completion_tokens: 132
  total_tokens: 4800
  cost_input_EUR: 0.00043
  cost_output_EUR: 0.000168
  cost_total_EUR: 0.000598
- iteration: ''
  model_name: ''
  question_number: 10
  user_question: |
    List customer data and his account balance for customers that have placed more than 10 orders and whose individual account balance is greater than 6000.
    Count the number of orders per customer too, order the data by customer name.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        c.c_acctbal AS account_balance
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10 AND c.c_acctbal > 6000
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        c.c_acctbal AS account_balance,
        COUNT(*) AS num_orders
    FROM customer c
    JOIN orders o ON o.o_custkey = c.c_custkey
    WHERE c.c_acctbal > 6000
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(*) > 10
    ORDER BY c.c_name ASC
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 19
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 2.19
  duration_llm: 7.05
  prompt_tokens: 1641
  completion_tokens: 101
  total_tokens: 2836
  cost_input_EUR: 0.00041
  cost_output_EUR: 0.000128
  cost_total_EUR: 0.000539
- iteration: ''
  model_name: ''
  question_number: 11
  user_question: |
    Which part types are most commonly sold by quantity, and how many units have been sold for each?
    List only the first 15 part types and order the data by quantity sold descending.
  sql_query: |
    SELECT
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity DESC
    OFFSET 0 ROWS FETCH NEXT 15 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 15 p.p_type AS part_type, SUM(l.l_quantity) AS total_quantity
    FROM part p
    INNER JOIN lineitem l ON l.l_partkey = p.p_partkey
    GROUP BY p.p_type
    ORDER BY SUM(l.l_quantity) DESC
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 2
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 6.39
  duration_llm: 10.88
  prompt_tokens: 1828
  completion_tokens: 55
  total_tokens: 3729
  cost_input_EUR: 0.000457
  cost_output_EUR: 7.0e-05
  cost_total_EUR: 0.000527
- iteration: ''
  model_name: ''
  question_number: 12
  user_question: |
    How many orders had a total price above 100000 and were placed before 1995 per year?
    Return the number of orders and the order year. Order by year ascending.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders
    WHERE o_totalprice > 100000
      AND o_orderdate < '1995-01-01'
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM
        orders o
    WHERE
        o.o_totalprice > 100000
        AND o.o_orderdate < '1995-01-01'
    GROUP BY
        YEAR(o.o_orderdate)
    ORDER BY
        order_year ASC
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 2
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.47
  duration_llm: 8.21
  prompt_tokens: 1533
  completion_tokens: 71
  total_tokens: 2939
  cost_input_EUR: 0.000383
  cost_output_EUR: 9.0e-05
  cost_total_EUR: 0.000473
- iteration: ''
  model_name: ''
  question_number: 13
  user_question: |
    Which customers placed orders in both 1994 and 1995?
    For each, return the number of orders placed in 1994 and the number in 1995.
    Show one row per customer. Order the results by customer name ascending
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) AS num_orders_1995
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) > 0
       AND SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) > 0
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        SUM(CASE WHEN o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31' THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN o.o_orderdate BETWEEN '1995-01-01' AND '1995-12-31' THEN 1 ELSE 0 END) AS num_orders_1995
    FROM
        customer c
    INNER JOIN
        orders o ON o.o_custkey = c.c_custkey
    GROUP BY
        c.c_custkey, c.c_name
    HAVING
        SUM(CASE WHEN o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31' THEN 1 ELSE 0 END) > 0
        AND SUM(CASE WHEN o.o_orderdate BETWEEN '1995-01-01' AND '1995-12-31' THEN 1 ELSE 0 END) > 0
    ORDER BY
        c.c_name ASC;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 6
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 2.32
  duration_llm: 10.48
  prompt_tokens: 1645
  completion_tokens: 235
  total_tokens: 3489
  cost_input_EUR: 0.000411
  cost_output_EUR: 0.000298
  cost_total_EUR: 0.00071
- iteration: ''
  model_name: ''
  question_number: 14
  user_question: |
    How many orders have been made per month in year 1992 by customers in AMERICA?
    Order by year, and month ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(o.o_orderkey) AS num_orders
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'AMERICA'
      AND YEAR(o.o_orderdate) = 1992
    GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_month ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(*) AS num_orders
    FROM orders o
    INNER JOIN customer c ON o.o_custkey = c.c_custkey
    INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
    INNER JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE o.o_orderdate BETWEEN '1992-01-01' AND '1992-12-31'
      AND r.r_name = 'AMERICA'
    GROUP BY c.c_custkey, c.c_name, YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_year ASC, order_month ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 5
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.46
  duration_llm: 11.8
  prompt_tokens: 1707
  completion_tokens: 170
  total_tokens: 3798
  cost_input_EUR: 0.000427
  cost_output_EUR: 0.000216
  cost_total_EUR: 0.000643
- iteration: ''
  model_name: ''
  question_number: 15
  user_question: |
    Show the number of orders per year between 1992 and 1995, with one column per each 3-letter month abbreviation (e.g., Jan, Feb, Mar) ordered by year ascending.
  sql_query: |
    SELECT *
    FROM (
        SELECT
            YEAR(o_orderdate) AS order_year,
            FORMAT(o_orderdate, 'MMM') AS order_month,
            COUNT(*) AS num_orders
        FROM orders
        WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1995
        GROUP BY YEAR(o_orderdate), FORMAT(o_orderdate, 'MMM')
    ) AS source_data
    PIVOT (
        SUM(num_orders)
        FOR order_month IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun],
                            [Jul], [Aug], [Sep], [Oct], [Nov], [Dec])
    ) AS pivot_table
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        order_year,
        [Jan] AS jan_num_orders,
        [Feb] AS feb_num_orders,
        [Mar] AS mar_num_orders,
        [Apr] AS apr_num_orders,
        [May] AS may_num_orders,
        [Jun] AS jun_num_orders,
        [Jul] AS jul_num_orders,
        [Aug] AS aug_num_orders,
        [Sep] AS sep_num_orders,
        [Oct] AS oct_num_orders,
        [Nov] AS nov_num_orders,
        [Dec] AS dec_num_orders
    FROM (
        SELECT
            YEAR(o_orderdate) AS order_year,
            LEFT(DATENAME(month, o_orderdate), 3) AS month_abbr,
            o_orderkey
        FROM orders
        WHERE o_orderdate BETWEEN '1992-01-01' AND '1995-12-31'
    ) AS src
    PIVOT (
        COUNT(o_orderkey) FOR month_abbr IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec])
    ) AS pvt
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 13
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 5.55
  duration_llm: 14.13
  prompt_tokens: 1537
  completion_tokens: 247
  total_tokens: 4055
  cost_input_EUR: 0.000384
  cost_output_EUR: 0.000314
  cost_total_EUR: 0.000698
- iteration: ''
  model_name: ''
  question_number: 16
  user_question: |
    For each customer located in the UNITED KINGDOM, compare their total spending in each quarter with the same quarter of the previous year.
    Calculate the year-over-year percentage change and round it to two decimal places.
    Return customer, year, quarter, total spend, and the percentage change.
    Only include cases where the percentage change is positive.
    List the top 20 customers by percentage growth, ordered descending.
  sql_query: |
    WITH customer_quarter AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name    AS customer_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM customer c
        JOIN orders o ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    yoy AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY customer_id, order_quarter
                ORDER BY order_year
            ) AS prev_year_amount
        FROM customer_quarter
    )
    SELECT TOP 20
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        CAST(
            100.0 * (total_amount - prev_year_amount) / NULLIF(prev_year_amount, 0)
            AS decimal(10,2)
        ) AS yoy_percent_change
    FROM yoy
    WHERE prev_year_amount IS NOT NULL
      AND (total_amount - prev_year_amount) > 0
    ORDER BY yoy_percent_change DESC;
  llm_sql_query: |-
    WITH cte_spend AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name AS customer_name,
            DATEPART(YEAR, o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM orders o
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, DATEPART(YEAR, o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    cte_with_lag AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_amount,
            (total_amount - LAG(total_amount) OVER (PARTITION BY customer_id, order_quarter ORDER BY order_year)) / NULLIF(LAG(total_amount) OVER (PARTITION BY customer_id, order_quarter ORDER BY order_year), 0) * 100 AS yoy_percent_change_raw
        FROM cte_spend
    )
    SELECT
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        ROUND(yoy_percent_change_raw, 2) AS yoy_percent_change
    FROM cte_with_lag
    WHERE yoy_percent_change_raw > 0
    ORDER BY yoy_percent_change_raw DESC
    OFFSET 0 ROWS FETCH NEXT 20 ROWS ONLY;
  tables_used:
  - customer
  - orders
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 20
  columns: 6
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.67
  duration_llm: 23.99
  prompt_tokens: 1722
  completion_tokens: 336
  total_tokens: 6070
  cost_input_EUR: 0.000431
  cost_output_EUR: 0.000427
  cost_total_EUR: 0.000857
- iteration: ''
  model_name: ''
  question_number: 17
  user_question: |
    Create a quarterly revenue pivot per region with columns Q1 through Q4, then calculate the absolute difference in revenue versus the previous quarter using LAG Function.
    Return region, year, quarter, revenue, and delta from the previous quarter, ordered by region, year, and quarter.
    Filter the data for orders placed between 1995 and 1997, and customers in the regions of EUROPE or AMERICA.
  sql_query: |
    WITH reg_qtr AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE o.o_orderdate BETWEEN '1995-01-01' AND '1997-12-31'
          AND (r.r_name = 'EUROPE' OR r.r_name = 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    lag_calc AS (
        SELECT
            region_id,
            region_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY region_id
                ORDER BY order_year, order_quarter
            ) AS prev_q_amount
        FROM reg_qtr
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        total_amount,
        total_amount - prev_q_amount AS delta_vs_prev_q
    FROM lag_calc
    ORDER BY region_name, order_year, order_quarter;
  llm_sql_query: |-
    WITH QuarterlyRevenue AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(quarter, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM orders o
        INNER JOIN customer c ON o.o_custkey = c.c_custkey
        INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
        INNER JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE o.o_orderdate BETWEEN '1995-01-01' AND '1997-12-31'
          AND r.r_name IN ('EUROPE', 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), DATEPART(quarter, o.o_orderdate)
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        total_amount,
        ABS(total_amount - LAG(total_amount) OVER (PARTITION BY region_id ORDER BY order_year, order_quarter)) AS delta_vs_prev_q
    FROM QuarterlyRevenue
    ORDER BY region_id, order_year, order_quarter;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 16
  columns: 6
  percent_rows_equality: 1.0
  percent_columns_equality: 0.83
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 1.92
  duration_llm: 16.7
  prompt_tokens: 1763
  completion_tokens: 259
  total_tokens: 4753
  cost_input_EUR: 0.000441
  cost_output_EUR: 0.000329
  cost_total_EUR: 0.00077
- iteration: ''
  model_name: ''
  question_number: 18
  user_question: |
    For each region and year, determine the percentage contribution with 2 decimals of every market segment to the total number of orders.
    Return region, year, market segment, total orders, and percent of total, ordered by region, year, and percent descending.
  sql_query: |
    WITH region_year_seg AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            c.c_mktsegment AS market_segment,
            COUNT(*) AS num_orders
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    )
    SELECT
        region_id,
        region_name,
        order_year,
        market_segment,
        num_orders,
        CAST(100.0 * num_orders / SUM(num_orders) OVER (PARTITION BY region_id, order_year) AS decimal(6,2)) AS pct_of_total
    FROM region_year_seg
    ORDER BY region_name, order_year, pct_of_total DESC;
  llm_sql_query: |-
    WITH order_summary AS (
        SELECT
            r.r_regionkey,
            r.r_name,
            c.c_mktsegment,
            YEAR(o.o_orderdate) AS order_year,
            COUNT(*) AS num_orders
        FROM region r
        JOIN nation n ON r.r_regionkey = n.n_regionkey
        JOIN customer c ON n.n_nationkey = c.c_nationkey
        JOIN orders o ON c.c_custkey = o.o_custkey
        GROUP BY r.r_regionkey, r.r_name, c.c_mktsegment, YEAR(o.o_orderdate)
    )
    SELECT
        r_regionkey AS region_id,
        r_name AS region_name,
        c_mktsegment AS market_segment,
        order_year,
        num_orders,
        ROUND(100.0 * num_orders / NULLIF(SUM(num_orders) OVER (PARTITION BY r_regionkey, order_year), 0), 2) AS percent_of_total
    FROM order_summary
    ORDER BY region_id, order_year, percent_of_total DESC
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 122
  columns: 6
  percent_rows_equality: 1.0
  percent_columns_equality: 0.83
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 2.54
  duration_llm: 28.39
  prompt_tokens: 1732
  completion_tokens: 214
  total_tokens: 6596
  cost_input_EUR: 0.000433
  cost_output_EUR: 0.000272
  cost_total_EUR: 0.000705
- iteration: ''
  model_name: ''
  question_number: 19
  user_question: |
    For each nation in the region of EUROPE, and for each year based on the order date, find the top 3 suppliers by total quantity supplied.
    Include the nation, the supplier, the total quantity, and their rank.
    Order the data by nation name, year, and ranking.
  sql_query: |
    WITH supplier_qty AS (
        SELECT
            n.n_nationkey AS nation_id,
            n.n_name      AS nation_name,
            s.s_suppkey AS supplier_id,
            s.s_name    AS supplier_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM supplier s
        JOIN nation n ON n.n_nationkey = s.s_nationkey
        JOIN lineitem l ON l.l_suppkey = s.s_suppkey
        JOIN orders o ON o.o_orderkey = l.l_orderkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
        GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, YEAR(o.o_orderdate)
    ),
    ranked AS (
        SELECT
            nation_id,
            nation_name,
            supplier_id,
            supplier_name,
            order_year,
            total_quantity,
            DENSE_RANK() OVER (
                PARTITION BY nation_id, order_year
                ORDER BY total_quantity DESC
            ) AS ranking
        FROM supplier_qty
    )
    SELECT
        nation_id,
        nation_name,
        supplier_id,
        supplier_name,
        order_year,
        total_quantity,
        ranking
    FROM ranked
    WHERE ranking <= 3
    ORDER BY nation_name, order_year, ranking;
  llm_sql_query: |-
    WITH supply_data AS (
        SELECT
            n.n_nationkey AS nation_id,
            n.n_name AS nation_name,
            s.s_suppkey AS supplier_id,
            s.s_name AS supplier_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM region r
        INNER JOIN nation n ON r.r_regionkey = n.n_regionkey
        INNER JOIN supplier s ON n.n_nationkey = s.s_nationkey
        INNER JOIN lineitem l ON s.s_suppkey = l.l_suppkey
        INNER JOIN orders o ON l.l_orderkey = o.o_orderkey
        WHERE r.r_name = 'EUROPE'
        GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, YEAR(o.o_orderdate)
    ),
    ranked_suppliers AS (
        SELECT
            nation_id,
            nation_name,
            supplier_id,
            supplier_name,
            order_year,
            total_quantity,
            DENSE_RANK() OVER (PARTITION BY nation_id, order_year ORDER BY total_quantity DESC) AS supplier_rank
        FROM supply_data
    )
    SELECT
        nation_id,
        nation_name,
        supplier_id,
        supplier_name,
        order_year,
        total_quantity,
        supplier_rank
    FROM ranked_suppliers
    WHERE supplier_rank <= 3
    ORDER BY nation_name, order_year, supplier_rank;
  tables_used:
  - supplier
  - nation
  - lineitem
  - orders
  - customer
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 105
  columns: 7
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 5.02
  duration_llm: 19.5
  prompt_tokens: 2175
  completion_tokens: 297
  total_tokens: 5656
  cost_input_EUR: 0.000544
  cost_output_EUR: 0.000377
  cost_total_EUR: 0.000921
- iteration: ''
  model_name: ''
  question_number: 20
  user_question: |
    Monitor price variability by calculating the standard deviation with 4 decimals of order prices for each part type, year, and quarter.
    Return part type, year, quarter, count of the orders, and the standard deviation of prices, ordered by part type, year, and quarter ascending.
    Include only orders placed by customers from JAPAN.
  sql_query: |
    WITH price_data AS (
        SELECT
            p.p_type AS part_type,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            o.o_totalprice AS order_price
        FROM orders o
        JOIN lineitem l ON l.l_orderkey = o.o_orderkey
        JOIN part p ON p.p_partkey = l.l_partkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN nation n ON n.n_nationkey = c.c_nationkey
        WHERE n.n_name = 'JAPAN'
    )
    SELECT
        part_type,
        order_year,
        order_quarter,
        COUNT(*) AS num_orders,
        CAST(STDEV(order_price) AS decimal(15,4)) AS price_stddev
    FROM price_data
    GROUP BY part_type, order_year, order_quarter
    ORDER BY part_type, order_year, order_quarter;
  llm_sql_query: |-
    WITH order_part_type AS (
        SELECT DISTINCT o.o_orderkey, o.o_orderdate, o.o_totalprice, p.p_type
        FROM orders o
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        JOIN lineitem l ON o.o_orderkey = l.l_orderkey
        JOIN part p ON l.l_partkey = p.p_partkey
        WHERE n.n_name = 'JAPAN'
    )
    SELECT
        opt.p_type AS part_type,
        YEAR(opt.o_orderdate) AS order_year,
        DATEPART(QUARTER, opt.o_orderdate) AS order_quarter,
        COUNT(*) AS num_orders,
        CAST(STDEV(opt.o_totalprice) AS DECIMAL(18,4)) AS price_stddev
    FROM order_part_type opt
    GROUP BY opt.p_type, YEAR(opt.o_orderdate), DATEPART(QUARTER, opt.o_orderdate)
    ORDER BY part_type ASC, order_year ASC, order_quarter ASC;
  tables_used:
  - orders
  - lineitem
  - part
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 1501
  columns: 5
  percent_rows_equality: 1.0
  percent_columns_equality: 0.6
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 4.48
  duration_llm: 46.48
  prompt_tokens: 2165
  completion_tokens: 220
  total_tokens: 10277
  cost_input_EUR: 0.000541
  cost_output_EUR: 0.000279
  cost_total_EUR: 0.000821
