questions:
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 1
  user_question: |
    Which customers from the 'BUILDING' market segment placed more than 10 orders in 1996? Order by total order value descending.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND YEAR(o.o_orderdate) = 1996
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY total_amount DESC;
  llm_sql_query: |-
    SELECT Customers.CustomerID, Customers.CompanyName, Customers.CustomerContactName, SUM(Orders.Freight) AS TotalOrderValue
    FROM Customers
    JOIN Orders ON Customers.CustomerID = Orders.CustomerID
    WHERE Customers.MarketSegment = 'BUILDING' AND YEAR(Orders.OrderDate) = 1996
    GROUP BY Customers.CustomerID, Customers.CompanyName, Customers.CustomerContactName
    HAVING COUNT(Orders.OrderID) > 10
    ORDER BY TotalOrderValue DESC;
  tables_used:
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 6.11
  prompt_tokens: 39
  completion_tokens: 322
  total_tokens: 361
  cost_input_EUR: 6.0e-06
  cost_output_EUR: 0.000193
  cost_total_EUR: 0.000199
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 2
  user_question: |
    For each region, what is the average supplier account balance and how many suppliers are in each region? Order by average balance descending.
  sql_query: |
    SELECT
        r.r_regionkey AS region_id,
        r.r_name      AS region_name,
        AVG(s.s_acctbal) AS avg_balance,
        COUNT(s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_balance DESC;
  llm_sql_query: |-
    SELECT
        r.region_name,
        AVG(sa.account_balance) as avg_balance,
        COUNT(*) as num_suppliers
    FROM
        suppliers sa
    JOIN
        regions r ON sa.region_id = r.region_id
    GROUP BY
        r.region_name
    ORDER BY
        avg_balance DESC;
  tables_used:
  - region
  - nation
  - supplier
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 4.27
  prompt_tokens: 35
  completion_tokens: 219
  total_tokens: 254
  cost_input_EUR: 5.0e-06
  cost_output_EUR: 0.000131
  cost_total_EUR: 0.000137
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 3
  user_question: |
    List the top 5 parts by total quantity ordered across all years. Order by total quantity descending.
  sql_query: |
    SELECT
        p.p_partkey AS part_id,
        p.p_name    AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    LIMIT 5;
  llm_sql_query: |-
    SELECT Part_desc, SUM(Quantity) AS TotalQuantity
    FROM Order_items
    GROUP BY Part_desc
    ORDER BY TotalQuantity DESC
    LIMIT 5;
  tables_used:
  - part
  - lineitem
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 3.29
  prompt_tokens: 27
  completion_tokens: 158
  total_tokens: 185
  cost_input_EUR: 4.0e-06
  cost_output_EUR: 9.5e-05
  cost_total_EUR: 9.9e-05
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 4
  user_question: |
    For each year from 1992 to 1994, identify the top 5 parts by total quantity ordered for customers from the region of ASIA. Order by year and total quantity descending.
  sql_query: |
    WITH yearly_totals AS (
        SELECT
            p.p_partkey AS part_id,
            p.p_name    AS part_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity,
            ROW_NUMBER() OVER (
                PARTITION BY YEAR(o.o_orderdate)
                ORDER BY SUM(l.l_quantity) DESC
            ) AS rn
        FROM part p
        JOIN lineitem l ON p.p_partkey = l.l_partkey
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        join region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'ASIA'
          AND YEAR(o.o_orderdate) BETWEEN 1992 AND 1994
        GROUP BY p.p_partkey, p.p_name, YEAR(o.o_orderdate)
    )
    SELECT
        part_id,
        part_name,
        order_year,
        total_quantity
    FROM yearly_totals
    WHERE rn <= 5
    ORDER BY order_year, total_quantity DESC;
  llm_sql_query: |-
    SELECT YEAR(OrderDate) as Year, Part, SUM(Quantity) as TotalQuantity
    FROM CustomerOrders
    WHERE CustomerRegion = 'ASIA' AND YEAR(OrderDate) BETWEEN 1992 AND 1994
    GROUP BY YEAR(OrderDate), Part
    ORDER BY YEAR(OrderDate), TotalQuantity DESC
    LIMIT 5
  tables_used:
  - part
  - lineitem
  - orders
  - customer
  - nation
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 8.42
  prompt_tokens: 50
  completion_tokens: 461
  total_tokens: 511
  cost_input_EUR: 7.0e-06
  cost_output_EUR: 0.000277
  cost_total_EUR: 0.000284
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 5
  user_question: |
    For orders placed in 1994, how many unique suppliers provided parts of type 'SMALL PLATED STEEL' and size 4,
    and what was their average supply cost per supplier, weighted by available quantity? Order the results by supplier.
  sql_query: |
    SELECT
        l.l_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        COUNT(DISTINCT l.l_suppkey) AS num_suppliers,
        AVG(ps.ps_supplycost * ps.ps_availqty) AS avg_cost
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey
    JOIN part p ON l.l_partkey = p.p_partkey
    JOIN supplier s ON l.l_suppkey = s.s_suppkey
    WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
      AND p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
    GROUP BY l.l_suppkey, s.s_name
    ORDER BY s.s_name ASC;
  llm_sql_query: |-
    SELECT
        Supplier,
        COUNT(DISTINCT Product) as PartsSupplied,
        SUM(Quantity) as TotalAvailableQuantity,
        ROUND(SUM(CostPerPiece * Quantity) / SUM(Quantity), 2) as WeightedAverageCostPerSupplier
    FROM Purchases
    WHERE
        Date > '1993-12-31' AND
        Date < '1995-01-01' AND
        'SMALL PLATED STEEL' = Product AND
        Size = 4
    GROUP BY
        Supplier
    ORDER BY
        Supplier;
  tables_used:
  - orders
  - lineitem
  - partsupp
  - part
  - supplier
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 6.67
  prompt_tokens: 67
  completion_tokens: 364
  total_tokens: 431
  cost_input_EUR: 1.0e-05
  cost_output_EUR: 0.000218
  cost_total_EUR: 0.000228
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 6
  user_question: |
    List the top 10 suppliers from GERMANY that supplied parts of type 'SMALL PLATED STEEL' and size 4.
    For each, calculate the total supply cost (supply cost x available quantity).
    Do not include the supplier's nation in the output. Order by total cost descending.
  sql_query: |
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
      AND n.n_name = 'GERMANY'
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_cost DESC
    LIMIT 10;
  llm_sql_query: |2-
     Here are the top 10 suppliers from Germany that supplied parts of type 'SMALL PLATED STEEL' and size 4, ordered by total supply cost in descending order:
    1. Metal Solutions GmbH
       - Total supply cost: € 150,000
    2. Stahlkomponenten Vertrieb GmbH
       - Total supply cost: € 120,000
    3. Plated Steel Hub AG
       - Total supply cost: € 100,000
    4. Steel Plate Specialists GmbH
       - Total supply cost: € 90,000
    5. Small Steel Parts GmbH
       - Total supply cost: € 85,000
    6. Demobar-Kunststoffe GmbH
       - Total supply cost: € 80,000
    7. Stahlplattierungen GmbH
       - Total supply cost: € 70,000
    8. Quality Steel Plate Suppliers AG
       - Total supply cost: € 65,000
    9. Advanced Steel Solutions GmbH
       - Total supply cost: € 60,000
    10. Steel Plate Innovations GmbH
        - Total supply cost: € 55,000
    Note: These results are hypothetical and not based on actual data.
  tables_used:
  - supplier
  - partsupp
  - nation
  - part
  executed: false
  llm_sql_query_changed: false
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 6.1
  prompt_tokens: 80
  completion_tokens: 325
  total_tokens: 405
  cost_input_EUR: 1.2e-05
  cost_output_EUR: 0.000195
  cost_total_EUR: 0.000207
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 7
  user_question: |
    Find the average order price (rounded to 2 decimals) and the total number of orders per year between 1992 and 1998, inclusive.
    Group by the year of the order date and return the results ordered by year ascending.
    Return the year, the total number of orders, and the average price.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        AVG(o_totalprice) AS avg_price,
        COUNT(*) AS num_orders
    FROM orders
    WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1998
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
      EXTRACT(YEAR FROM order_date) AS order_year,
      COUNT(*) AS total_orders,
      ROUND(AVG(order_price), 2) AS average_price
    FROM
      orders
    WHERE
      EXTRACT(YEAR FROM order_date) BETWEEN 1992 AND 1998
    GROUP BY
      order_year
    ORDER BY
      order_year ASC;
  tables_used:
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 7.04
  prompt_tokens: 81
  completion_tokens: 383
  total_tokens: 464
  cost_input_EUR: 1.2e-05
  cost_output_EUR: 0.00023
  cost_total_EUR: 0.000242
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 8
  user_question: |
    Which three nations had the highest total order amount in 1997? Also return the number of orders per nation.
    Sort by total amount descending and limit the result to 3 rows
  sql_query: |
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name      AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE YEAR(o.o_orderdate) = 1997
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
    LIMIT 3;
  llm_sql_query: |-
    SELECT nation, COUNT(*) as order_count, SUM(order_amount) as total_amount
    FROM orders
    WHERE YEAR(order_date) = 1997
    GROUP BY nation
    ORDER BY total_amount DESC
    LIMIT 3;
  tables_used:
  - nation
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 4.3
  prompt_tokens: 47
  completion_tokens: 226
  total_tokens: 273
  cost_input_EUR: 7.0e-06
  cost_output_EUR: 0.000136
  cost_total_EUR: 0.000143
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 9
  user_question: |
    For each year, list the number of sales and the total amount for items ordered in December for customers based in the region of EUROPE whose market segment is 'AUTOMOBILE', ordered by year ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'EUROPE'
      AND c.c_mktsegment = 'AUTOMOBILE'
      AND MONTH(o.o_orderdate) = 12
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.OrderDate) AS OrderYear,
        COUNT(o.OrderID) AS NumberOfSales,
        SUM(o.TotalAmount) AS TotalAmount
    FROM
        Orders AS o
    JOIN
        Customers AS c ON o.CustomerID = c.CustomerID
    JOIN
        MarketSegments AS ms ON o.MarketSegmentID = ms.MarketSegmentID
    WHERE
        c.Region = 'EUROPE'
        AND ms.Segment = 'AUTOMOBILE'
        AND MONTH(o.OrderDate) = 12
    GROUP BY
        YEAR(o.OrderDate)
    ORDER BY
        YEAR(o.OrderDate) ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 10.79
  prompt_tokens: 51
  completion_tokens: 606
  total_tokens: 657
  cost_input_EUR: 8.0e-06
  cost_output_EUR: 0.000364
  cost_total_EUR: 0.000371
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 10
  user_question: |
    List customer data and his account balance for customers that have placed more than 10 orders and whose individual account balance is greater than 6000.
    Count the number of orders per customer too, order the data by customer name.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        c.c_acctbal AS account_balance
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10 AND c.c_acctbal > 6000
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
      c.customer_name,
      (SELECT COUNT(*) FROM orders o WHERE o.customer_id = c.customer_id) as total_orders,
      c.account_balance
    FROM
      customers c
    WHERE
      EXISTS (
        SELECT *
        FROM orders
        WHERE customer_id = c.customer_id
        GROUP BY customer_id
        HAVING COUNT(*) > 10 AND MAX(account_balance) > 6000
      )
    ORDER BY
      c.customer_name;
  tables_used:
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 6.96
  prompt_tokens: 57
  completion_tokens: 377
  total_tokens: 434
  cost_input_EUR: 9.0e-06
  cost_output_EUR: 0.000226
  cost_total_EUR: 0.000235
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 11
  user_question: |
    Which part types are most commonly sold by quantity, and how many units have been sold for each?
    List only the first 15 part types and order the data by quantity sold descending.
  sql_query: |
    SELECT
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity DESC
    LIMIT 15;
  llm_sql_query: |2-
     Here are the top 15 part types sold by quantity, ordered by quantity sold descending:
    1. Bolt - 10,000 units
    2. Screw - 9,500 units
    3. Nut - 8,750 units
    4. Washer - 7,600 units
    5. Bracket - 6,400 units
    6. Hinge - 5,800 units
    7. Rivet - 5,500 units
    8. L-Bracket - 5,200 units
    9. Flange - 4,600 units
    10. Clamp - 4,400 units
    11. Spring - 4,100 units
    12. Gasket - 3,800 units
    13. Plug - 3,500 units
    14. Clevis - 3,200 units
    15. Hook-and-eye - 3,000 units
    Note: These numbers are illustrative and not based on actual sales data.
  tables_used:
  - part
  - lineitem
  executed: false
  llm_sql_query_changed: false
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 4.69
  prompt_tokens: 47
  completion_tokens: 248
  total_tokens: 295
  cost_input_EUR: 7.0e-06
  cost_output_EUR: 0.000149
  cost_total_EUR: 0.000156
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 12
  user_question: |
    How many orders had a total price above 100000 and were placed before 1995 per year?
    Return the number of orders and the order year. Order by year ascending.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders
    WHERE o_totalprice > 100000
      AND o_orderdate < '1995-01-01'
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT order_year, COUNT(*) as num_orders
    FROM orders
    WHERE total_price > 100000 AND order_year < 1995
    GROUP BY order_year
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 5.02
  prompt_tokens: 51
  completion_tokens: 265
  total_tokens: 316
  cost_input_EUR: 8.0e-06
  cost_output_EUR: 0.000159
  cost_total_EUR: 0.000167
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 13
  user_question: |
    Which customers placed orders in both 1994 and 1995?
    For each, return the number of orders placed in 1994 and the number in 1995.
    Show one row per customer. Order the results by customer name ascending
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) AS num_orders_1995
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) > 0
       AND SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) > 0
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        o1.customer_id,
        COUNT(DISTINCT CASE WHEN YEAR(o1.order_date) = 1994 THEN o1.order_id END) AS orders_in_1994,
        COUNT(DISTINCT CASE WHEN YEAR(o2.order_date) = 1995 THEN o2.order_id END) AS orders_in_1995
    FROM
        Orders o1
    JOIN
        Orders o2 ON o1.customer_id = o2.customer_id
    WHERE
        YEAR(o1.order_date) = 1994 AND YEAR(o2.order_date) = 1995
    GROUP BY
        o1.customer_id
    ORDER BY
        o1.customer_id;
  tables_used:
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 7.23
  prompt_tokens: 67
  completion_tokens: 393
  total_tokens: 460
  cost_input_EUR: 1.0e-05
  cost_output_EUR: 0.000236
  cost_total_EUR: 0.000246
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 14
  user_question: |
    How many orders have been made per month in year 1992 by customers in AMERICA?
    Order by year, and month ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(o.o_orderkey) AS num_orders
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'AMERICA'
      AND YEAR(o.o_orderdate) = 1992
    GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_month ASC;
  llm_sql_query: |-
    SELECT
      EXTRACT(MONTH FROM order_date) AS month,
      COUNT(order_id) AS number_of_orders
    FROM
      orders
    WHERE
      EXTRACT(YEAR FROM order_date) = 1992
      AND country = 'AMERICA'
    GROUP BY
      month
    ORDER BY
      month ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 5.37
  prompt_tokens: 40
  completion_tokens: 291
  total_tokens: 331
  cost_input_EUR: 6.0e-06
  cost_output_EUR: 0.000175
  cost_total_EUR: 0.000181
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 15
  user_question: |
    Show the number of orders per year between 1992 and 1995, with one column per each 3-letter month abbreviation (e.g., Jan, Feb, Mar) ordered by year ascending.
  sql_query: |
    SELECT
        EXTRACT(YEAR FROM o_orderdate) AS order_year,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jan' THEN 1 ELSE 0 END) AS Jan,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Feb' THEN 1 ELSE 0 END) AS Feb,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Mar' THEN 1 ELSE 0 END) AS Mar,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Apr' THEN 1 ELSE 0 END) AS Apr,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'May' THEN 1 ELSE 0 END) AS May,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jun' THEN 1 ELSE 0 END) AS Jun,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jul' THEN 1 ELSE 0 END) AS Jul,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Aug' THEN 1 ELSE 0 END) AS Aug,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Sep' THEN 1 ELSE 0 END) AS Sep,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Oct' THEN 1 ELSE 0 END) AS Oct,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Nov' THEN 1 ELSE 0 END) AS Nov,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Dec' THEN 1 ELSE 0 END) AS Dec
    FROM orders
    WHERE EXTRACT(YEAR FROM o_orderdate) BETWEEN 1992 AND 1995
    GROUP BY order_year
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(YEAR FROM order_date) AS year,
        SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 1 THEN 1 ELSE 0 END) AS Jan,
        SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 2 THEN 1 ELSE 0 END) AS Feb,
        SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 3 THEN 1 ELSE 0 END) AS Mar,
        -- Include similar SUM(CASE) statements for the remaining months
        SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 12 THEN 1 ELSE 0 END) AS Dec
    FROM orders
    WHERE EXTRACT(YEAR FROM order_date) BETWEEN 1992 AND 1995
    GROUP BY year
    ORDER BY year ASC;
  tables_used:
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 6.17
  prompt_tokens: 55
  completion_tokens: 336
  total_tokens: 391
  cost_input_EUR: 8.0e-06
  cost_output_EUR: 0.000202
  cost_total_EUR: 0.00021
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 16
  user_question: |
    For each customer located in the UNITED KINGDOM, compare their total spending in each quarter with the same quarter of the previous year.
    Calculate the year-over-year percentage change and round it to two decimal places.
    Return customer, year, quarter, total spend, and the percentage change.
    Only include cases where the percentage change is positive.
    List the top 20 customers by percentage growth, ordered descending.
  sql_query: |
    WITH customer_quarter AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name AS customer_name,
            EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
            EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM customer c
        JOIN orders o ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, EXTRACT(YEAR FROM o.o_orderdate), EXTRACT(QUARTER FROM o.o_orderdate)
    ),
    yoy AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY customer_id, order_quarter
                ORDER BY order_year
            ) AS prev_year_amount
        FROM customer_quarter
    )
    SELECT
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        CAST(
            100.0 * (total_amount - prev_year_amount) / NULLIF(prev_year_amount, 0)
            AS DECIMAL(10,2)
        ) AS yoy_percent_change
    FROM yoy
    WHERE prev_year_amount IS NOT NULL
      AND (total_amount - prev_year_amount) > 0
    ORDER BY yoy_percent_change DESC
    LIMIT 20;
  llm_sql_query: |-
    WITH oa_comparison AS (
        SELECT
            customer_id,
            EXTRACT(YEAR FROM order_date) AS order_year,
            EXTRACT(QUARTER FROM order_date) AS order_quarter,
            SUM(total_spending) AS total_spending
        FROM
            orders
        WHERE
            customer_id IN (SELECT customer_id FROM customers WHERE country = 'UNITED KINGDOM')
        GROUP BY
            customer_id,
            order_year,
            order_quarter
    ),
    ya_spending AS (
        SELECT
            customer_id,
            order_year,
            order_quarter,
            total_spending,
            LAG(total_spending) OVER (
                PARTITION BY customer_id, order_quarter
                ORDER BY order_year
            ) AS previous_quarter_spending
        FROM
            oa_comparison
    ),
    percentage_change AS (
        SELECT
            customer_id,
            order_year,
            order_quarter,
            total_spending,
            ROUND(((total_spending - previous_quarter_spending) / previous_quarter_spending) * 100, 2) AS percent_change
        FROM
            ya_spending
        WHERE
            previous_quarter_spending IS NOT NULL
    ),
    positive_growth AS (
        SELECT
            *
        FROM
            percentage_change
        WHERE
            percent_change > 0
    ),
    ranked_customers AS (
        SELECT
            *,
            RANK() OVER (ORDER BY percent_change DESC) AS rank
        FROM
            positive_growth
    )
    SELECT
        customer_id,
        order_year,
        order_quarter,
        total_spending,
        percent_change
    FROM
        ranked_customers
    WHERE
        rank <= 20;
  tables_used:
  - customer
  - orders
  - nation
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 9.6
  prompt_tokens: 99
  completion_tokens: 529
  total_tokens: 628
  cost_input_EUR: 1.5e-05
  cost_output_EUR: 0.000317
  cost_total_EUR: 0.000332
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 17
  user_question: |
    Create a quarterly revenue pivot per region with columns Q1 through Q4, then calculate the absolute difference in revenue versus the previous quarter using LAG Function.
    Return region, year, quarter, revenue, and delta from the previous quarter, ordered by region, year, and quarter.
    Filter the data for orders placed between 1995 and 1997, and customers in the regions of EUROPE or AMERICA.
  sql_query: |
    WITH reg_qtr AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name AS region_name,
            EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
            EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE o.o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1997-12-31'
          AND (r.r_name = 'EUROPE' OR r.r_name = 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, EXTRACT(YEAR FROM o.o_orderdate), EXTRACT(QUARTER FROM o.o_orderdate)
    ),
    lag_calc AS (
        SELECT
            region_id,
            region_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY region_id
                ORDER BY order_year, order_quarter
            ) AS prev_q_amount
        FROM reg_qtr
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        total_amount,
        total_amount - prev_q_amount AS delta_vs_prev_q
    FROM lag_calc
    ORDER BY region_name, order_year, order_quarter;
  llm_sql_query: |-
    WITH ranked_data AS (
      SELECT
        region,
        EXTRACT(YEAR FROM order_date) AS year,
        EXTRACT(QUARTER FROM order_date) AS quarter,
        SUM(revenue) AS revenue
      FROM
        order_data
      WHERE
        EXTRACT(YEAR FROM order_date) BETWEEN 1995 AND 1997
        AND region IN ('EUROPE', 'AMERICA')
      GROUP BY
        region, year, quarter
    ),
    pivot_data AS (
      SELECT
        region,
        year,
        quarter,
        revenue,
        LAG(revenue) OVER(PARTITION BY region ORDER BY year, quarter) AS prev_revenue
      FROM
        ranked_data
    ),
    final_data AS (
      SELECT
        region,
        year,
        quarter,
        revenue,
        COALESCE(revenue - prev_revenue, 0) AS delta
      FROM
        pivot_data
    )
    SELECT
      *
    FROM
      final_data
    ORDER BY
      region,
      year,
      quarter;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 8.95
  prompt_tokens: 104
  completion_tokens: 494
  total_tokens: 598
  cost_input_EUR: 1.6e-05
  cost_output_EUR: 0.000296
  cost_total_EUR: 0.000312
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 18
  user_question: |
    For each region and year, determine the percentage contribution with 2 decimals of every market segment to the total number of orders.
    Return region, year, market segment, total orders, and percent of total, ordered by region, year, and percent descending.
  sql_query: |
    WITH region_year_seg AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            c.c_mktsegment AS market_segment,
            COUNT(*) AS num_orders
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    )
    SELECT
        region_id,
        region_name,
        order_year,
        market_segment,
        num_orders,
        CAST(100.0 * num_orders / SUM(num_orders) OVER (PARTITION BY region_id, order_year) AS decimal(6,2)) AS pct_of_total
    FROM region_year_seg
    ORDER BY region_name, order_year, pct_of_total DESC;
  llm_sql_query: |-
    WITH RegionYearTotal AS
    (
        SELECT
            region,
            year,
            SUM(total_orders) AS total_orders
        FROM
            orders_table
        GROUP BY
            region,
            year
    )
    SELECT
        o.region,
        o.year,
        o.market_segment,
        o.total_orders,
        ROUND(
            (o.total_orders * 100.0) / r.total_orders,
            2
        ) AS percent_of_total
    FROM
        orders_table o
    JOIN
        RegionYearTotal r ON o.region = r.region AND o.year = r.year
    ORDER BY
        o.region,
        o.year,
        percent_of_total DESC;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 1750.24
  prompt_tokens: 62
  completion_tokens: 428
  total_tokens: 490
  cost_input_EUR: 9.0e-06
  cost_output_EUR: 0.000257
  cost_total_EUR: 0.000266
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 19
  user_question: |
    For each nation in the region of EUROPE, and for each year based on the order date, find the top 3 suppliers by total quantity supplied.
    Include the nation, the supplier, the total quantity, and their rank.
    Order the data by nation name, year, and ranking.
  sql_query: |
    WITH supplier_qty AS (
        SELECT
            n.n_nationkey AS nation_id,
            n.n_name      AS nation_name,
            s.s_suppkey AS supplier_id,
            s.s_name    AS supplier_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM supplier s
        JOIN nation n ON n.n_nationkey = s.s_nationkey
        JOIN lineitem l ON l.l_suppkey = s.s_suppkey
        JOIN orders o ON o.o_orderkey = l.l_orderkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
        GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, YEAR(o.o_orderdate)
    ),
    ranked AS (
        SELECT
            nation_id,
            nation_name,
            supplier_id,
            supplier_name,
            order_year,
            total_quantity,
            DENSE_RANK() OVER (
                PARTITION BY nation_id, order_year
                ORDER BY total_quantity DESC
            ) AS ranking
        FROM supplier_qty
    )
    SELECT
        nation_id,
        nation_name,
        supplier_id,
        supplier_name,
        order_year,
        total_quantity,
        ranking
    FROM ranked
    WHERE ranking <= 3
    ORDER BY nation_name, order_year, ranking;
  llm_sql_query: |-
    WITH ranked_suppliers AS (
     SELECT
      nn.name AS nation,
      nc.date_from AS year,
      nc.supplier_name AS supplier,
      nc.total_quantity,
      DENSE_RANK() OVER (
       PARTITION BY nn.name, YEAR(nc.date_from)
       ORDER BY nc.total_quantity DESC
      ) AS rank
     FROM
      NationalCollector nc
      INNER JOIN Nation nn ON nc.nation_id = nn.id
    )
    SELECT
     *
    FROM
     ranked_suppliers
    WHERE
     rank <= 3
    ORDER BY
     nation,
     year,
     rank;
  tables_used:
  - supplier
  - nation
  - lineitem
  - orders
  - customer
  - region
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 7.95
  prompt_tokens: 69
  completion_tokens: 400
  total_tokens: 469
  cost_input_EUR: 1.0e-05
  cost_output_EUR: 0.00024
  cost_total_EUR: 0.00025
- iteration: '01'
  model_name: Phi-3-medium-128k-instruct
  question_number: 20
  user_question: |
    Monitor price variability by calculating the standard deviation with 4 decimals of order prices for each part type, year, and quarter.
    Return part type, year, quarter, count of the orders, and the standard deviation of prices, ordered by part type, year, and quarter ascending.
    Include only orders placed by customers from JAPAN.
  sql_query: |
    WITH price_data AS (
      SELECT
          p.p_type AS part_type,
          EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
          EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
          o.o_totalprice AS order_price
      FROM orders o
      JOIN lineitem l ON l.l_orderkey = o.o_orderkey
      JOIN part p ON p.p_partkey = l.l_partkey
      JOIN customer c ON c.c_custkey = o.o_custkey
      JOIN nation n ON n.n_nationkey = c.c_nationkey
      WHERE n.n_name = 'JAPAN'
    )
    SELECT
        part_type,
        order_year,
        order_quarter,
        COUNT(*) AS num_orders,
        CAST(STDDEV_SAMP(order_price) AS DECIMAL(15,4)) AS price_stddev
    FROM price_data
    GROUP BY part_type, order_year, order_quarter
    ORDER BY part_type, order_year, order_quarter;
  llm_sql_query: |-
    SELECT
      part_type,
      DATE_PART('year', order_date) AS year,
      DATE_PART('quarter', order_date) AS quarter,
      COUNT(*) AS order_count,
      ROUND(STDEV(order_price), 4) AS price_std_dev
    FROM orders
    WHERE
      customer_id IN (
        SELECT customer_id
        FROM customers
        WHERE country = 'JAPAN'
      )
    GROUP BY part_type, year, quarter
    ORDER BY part_type, year, quarter ASC;
  tables_used:
  - orders
  - lineitem
  - part
  - customer
  - nation
  executed: false
  llm_sql_query_changed: true
  rows: 0
  columns: 0
  rows_equality: 0.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 0
  duration_llm: 8.08
  prompt_tokens: 81
  completion_tokens: 443
  total_tokens: 524
  cost_input_EUR: 1.2e-05
  cost_output_EUR: 0.000266
  cost_total_EUR: 0.000278
