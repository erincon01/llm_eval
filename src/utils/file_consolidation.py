import csv
import os
import re

from data.questions import Questions


def consolidate_files_by_iteration(results_path: str, file_name_prefix: str) -> None:
    """
    Consolidate the files generated by the LLM into a single file by iteration.

    :param results_path: Path to the results folder.
    :param file_name_prefix: Prefix of the files to consolidate.
    :return: None
    """
    # Search for the generated files
    filtered_files = []
    model_names = []

    for file in os.listdir(results_path):
        file_path = os.path.join(results_path, file)
        if os.path.isfile(file_path) and file.startswith(file_name_prefix) and file.endswith(".yaml"):
            filtered_files.append(file_path)
            # Extract the model as the last part of the file name, after the last underscore and
            # before the ".yaml" extension
            # For example: results_llm_01_DeepSeek-V3-0324.yaml
            # will extract the model "DeepSeek-V3-0324"

            for file in filtered_files:
                # Extract the model name using regex
                match = re.search(r"_(.+)\.yaml$", file)
                if match:
                    model_names.append(match.group(1))

    model_names = list(set(model_names))

    for model in model_names:
        agg_file_name = f"{results_path}/result_agg_{model}.yaml"
        q_agg = Questions(yaml_file=agg_file_name)

        # Filter the files to only the ones that contain the model name
        model_files = [f for f in filtered_files if f.endswith(model + ".yaml")]

        for f in model_files:
            questions = Questions(yaml_file=f)
            all_questions = questions.get_all_questions()

            iteration = "00"

            match = re.search(r"results_llm_(\d{2})_", f)
            if match:
                iteration = match.group(1)

            # Add the questions to the q_agg object
            for question in all_questions:
                question["iteration"] = iteration
                q_agg.add_question(question)

        q_agg.save_questions(yaml_file=agg_file_name)
        print(f"Consolidated file {agg_file_name} generated.")


def consolidate_files_by_model(results_path: str, file_name_prefix: str) -> None:
    """
    Consolidate the files generated by the LLM into a single file by model.

    :param results_path: Path to the results folder.
    :param file_name_prefix: Prefix of the files to consolidate.
    :return: None
    """
    # Search for the generated files
    filtered_files = []

    for file in os.listdir(results_path):
        file_path = os.path.join(results_path, file)
        if os.path.isfile(file_path) and file.startswith(file_name_prefix) and file.endswith(".yaml"):
            filtered_files.append(file_path)

    # Extract the model as the last part of the file name and before the ".yaml" extension
    # For example: results_agg_DeepSeek-V3-0324.yaml
    # will extract the model "DeepSeek-V3-0324"

    agg_file_name = f"{results_path}/results_ALL_agg.yaml"
    q_agg = Questions(yaml_file=agg_file_name)

    for file in filtered_files:
        # Extract the model name using regex
        model_name = ""
        match = re.search(r"results_agg_(.+)\.yaml$", file)
        if match:
            model_name = match.group(1)

        questions = Questions(yaml_file=file)
        all_questions = questions.get_all_questions()

        # Add the model_name to the q_agg object
        for question in all_questions:
            question["model_name"] = model_name
            q_agg.add_question(question)

    q_agg.save_questions(yaml_file=agg_file_name)
    print(f"Consolidated file {agg_file_name} generated.")


def consolidate_csv_files(results_path: str, file_name_prefix: str) -> None:
    """
    Consolidate the CSV files generated by the LLM into a single file.

    :param results_path: Path to the results folder.
    :param file_name_prefix: Prefix of the files to consolidate.
    :return: None
    """
    # Search for the generated files
    filtered_files = []

    for file in os.listdir(results_path):
        file_path = os.path.join(results_path, file)
        if os.path.isfile(file_path) and file.startswith(file_name_prefix) and file.endswith(".csv"):
            filtered_files.append(file_path)

    # Create a consolidated CSV file
    consolidated_file_name = f"{results_path}/AGG_{file_name_prefix}.csv"
    header_written = False

    with open(consolidated_file_name, "w", newline="", encoding="utf-8") as outfile:
        writer = csv.writer(outfile)
        for file in filtered_files:
            with open(file, "r", newline="", encoding="utf-8") as infile:
                reader = csv.reader(infile)
                for i, row in enumerate(reader):
                    if i == 0:
                        if not header_written:
                            writer.writerow(row)
                            header_written = True
                        # Skip header for subsequent files
                        continue
                    writer.writerow(row)

    print(f"Consolidated CSV file {consolidated_file_name} generated.")
