questions:
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 1
  user_question: |
    Which customers from the 'BUILDING' market segment placed more than 10 orders in 1996? Order by total order value descending.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND YEAR(o.o_orderdate) = 1996
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY total_amount DESC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    INNER JOIN orders o ON o.o_custkey = c.c_custkey
    WHERE c.c_mktsegment = 'BUILDING'
        AND o.o_orderdate BETWEEN DATE '1996-01-01' AND DATE '1996-12-31'
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(*) > 10
    ORDER BY total_amount DESC
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 24
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.2
  duration_llm: 3.39
  prompt_tokens: 2255
  completion_tokens: 158
  total_tokens: 2413
  cost_input_EUR: 0.006765
  cost_output_EUR: 0.00237
  cost_total_EUR: 0.009135
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 2
  user_question: |
    For each region, what is the average supplier account balance and how many suppliers are in each region? Order by average balance descending.
  sql_query: |
    SELECT
        r.r_regionkey AS region_id,
        r.r_name      AS region_name,
        AVG(s.s_acctbal) AS avg_balance,
        COUNT(s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_balance DESC;
  llm_sql_query: |-
    SELECT
        r.r_regionkey AS region_id,
        r.r_name AS region_name,
        COUNT(DISTINCT s.s_suppkey) AS num_suppliers,
        AVG(s.s_acctbal) AS avg_account_balance
    FROM region r
    INNER JOIN nation n ON n.n_regionkey = r.r_regionkey
    INNER JOIN supplier s ON s.s_nationkey = n.n_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_account_balance DESC
  tables_used:
  - region
  - nation
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.03
  duration_llm: 3.07
  prompt_tokens: 2144
  completion_tokens: 135
  total_tokens: 2279
  cost_input_EUR: 0.006432
  cost_output_EUR: 0.002025
  cost_total_EUR: 0.008457
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 3
  user_question: |
    List the top 5 parts by total quantity ordered across all years. Order by total quantity descending.
  sql_query: |
    SELECT
        p.p_partkey AS part_id,
        p.p_name    AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    LIMIT 5;
  llm_sql_query: |-
    SELECT
        p.p_partkey AS part_id,
        p.p_name AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    INNER JOIN lineitem l ON l.l_partkey = p.p_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    LIMIT 5;
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 20.52
  duration_llm: 2.13
  prompt_tokens: 2493
  completion_tokens: 98
  total_tokens: 2591
  cost_input_EUR: 0.007479
  cost_output_EUR: 0.00147
  cost_total_EUR: 0.008949
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 4
  user_question: |
    For each year from 1992 to 1994, identify the top 5 parts by total quantity ordered for customers from the region of ASIA. Order by year and total quantity descending.
  sql_query: |
    WITH yearly_totals AS (
        SELECT
            p.p_partkey AS part_id,
            p.p_name    AS part_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity,
            ROW_NUMBER() OVER (
                PARTITION BY YEAR(o.o_orderdate)
                ORDER BY SUM(l.l_quantity) DESC
            ) AS rn
        FROM part p
        JOIN lineitem l ON p.p_partkey = l.l_partkey
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        join region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'ASIA'
          AND YEAR(o.o_orderdate) BETWEEN 1992 AND 1994
        GROUP BY p.p_partkey, p.p_name, YEAR(o.o_orderdate)
    )
    SELECT
        part_id,
        part_name,
        order_year,
        total_quantity
    FROM yearly_totals
    WHERE rn <= 5
    ORDER BY order_year, total_quantity DESC;
  llm_sql_query: |-
    SELECT
        EXTRACT(year FROM o.o_orderdate) AS order_year,
        p.p_partkey AS part_id,
        p.p_name AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    INNER JOIN lineitem l ON l.l_partkey = p.p_partkey
    INNER JOIN orders o ON o.o_orderkey = l.l_orderkey
    INNER JOIN customer c ON c.c_custkey = o.o_custkey
    INNER JOIN nation n ON n.n_nationkey = c.c_nationkey
    INNER JOIN region r ON r.r_regionkey = n.n_regionkey
    WHERE r.r_name = 'ASIA'
        AND o.o_orderdate BETWEEN DATE '1992-01-01' AND DATE '1994-12-31'
    GROUP BY EXTRACT(year FROM o.o_orderdate), p.p_partkey, p.p_name
    QUALIFY ROW_NUMBER() OVER (PARTITION BY EXTRACT(year FROM o.o_orderdate) ORDER BY SUM(l.l_quantity) DESC) <= 5
    ORDER BY order_year, total_quantity DESC
  tables_used:
  - part
  - lineitem
  - orders
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 3.46
  duration_llm: 4.13
  prompt_tokens: 2885
  completion_tokens: 291
  total_tokens: 3176
  cost_input_EUR: 0.008655
  cost_output_EUR: 0.004365
  cost_total_EUR: 0.01302
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 5
  user_question: |
    For orders placed in 1994, how many unique suppliers provided parts of type 'SMALL PLATED STEEL' and size 4,
    and what was their average supply cost per supplier, weighted by available quantity? Order the results by supplier.
  sql_query: |
    SELECT
        l.l_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        COUNT(DISTINCT l.l_suppkey) AS num_suppliers,
        AVG(ps.ps_supplycost * ps.ps_availqty) AS avg_cost
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey
    JOIN part p ON l.l_partkey = p.p_partkey
    JOIN supplier s ON l.l_suppkey = s.s_suppkey
    WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
      AND p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
    GROUP BY l.l_suppkey, s.s_name
    ORDER BY s.s_name ASC;
  llm_sql_query: |-
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        COUNT(DISTINCT l.l_suppkey) AS num_suppliers,
        SUM(ps.ps_supplycost * ps.ps_availqty) / SUM(ps.ps_availqty) AS weighted_avg_cost
    FROM supplier s
    INNER JOIN lineitem l ON l.l_suppkey = s.s_suppkey
    INNER JOIN orders o ON o.o_orderkey = l.l_orderkey
    INNER JOIN part p ON p.p_partkey = l.l_partkey
    INNER JOIN partsupp ps ON ps.ps_partkey = p.p_partkey AND ps.ps_suppkey = s.s_suppkey
    WHERE EXTRACT(YEAR FROM o.o_orderdate) = 1994
        AND p.p_type = 'SMALL PLATED STEEL'
        AND p.p_size = 4
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY s.s_suppkey;
  tables_used:
  - orders
  - lineitem
  - partsupp
  - part
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 648
  columns: 4
  rows_equality: 1.0
  columns_equality: 0.75
  datasets_equality: 0.0
  duration_sql: 0.74
  duration_llm: 3.95
  prompt_tokens: 2907
  completion_tokens: 262
  total_tokens: 3169
  cost_input_EUR: 0.008721
  cost_output_EUR: 0.00393
  cost_total_EUR: 0.012651
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 6
  user_question: |
    List the top 10 suppliers from GERMANY that supplied parts of type 'SMALL PLATED STEEL' and size 4.
    For each, calculate the total supply cost (supply cost x available quantity).
    Do not include the supplier's nation in the output. Order by total cost descending.
  sql_query: |
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
      AND n.n_name = 'GERMANY'
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_cost DESC
    LIMIT 10;
  llm_sql_query: |-
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_supply_cost
    FROM supplier s
    INNER JOIN nation n ON n.n_nationkey = s.s_nationkey
    INNER JOIN partsupp ps ON ps.ps_suppkey = s.s_suppkey
    INNER JOIN part p ON p.p_partkey = ps.ps_partkey
    WHERE n.n_name = 'GERMANY'
    AND p.p_type = 'SMALL PLATED STEEL'
    AND p.p_size = 4
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_supply_cost DESC
    LIMIT 10
  tables_used:
  - supplier
  - partsupp
  - nation
  - part
  executed: true
  llm_sql_query_changed: false
  rows: 10
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.06
  duration_llm: 3.1
  prompt_tokens: 2346
  completion_tokens: 193
  total_tokens: 2539
  cost_input_EUR: 0.007038
  cost_output_EUR: 0.002895
  cost_total_EUR: 0.009933
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 7
  user_question: |
    Find the average order price (rounded to 2 decimals) and the total number of orders per year between 1992 and 1998, inclusive.
    Group by the year of the order date and return the results ordered by year ascending.
    Return the year, the total number of orders, and the average price.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        AVG(o_totalprice) AS avg_price,
        COUNT(*) AS num_orders
    FROM orders
    WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1998
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(year FROM o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        ROUND(AVG(o_totalprice), 2) AS avg_price
    FROM orders
    WHERE o_orderdate BETWEEN DATE '1992-01-01' AND DATE '1998-12-31'
    GROUP BY EXTRACT(year FROM o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 7
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.1
  duration_llm: 2.44
  prompt_tokens: 2177
  completion_tokens: 104
  total_tokens: 2281
  cost_input_EUR: 0.006531
  cost_output_EUR: 0.00156
  cost_total_EUR: 0.008091
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 8
  user_question: |
    Which three nations had the highest total order amount in 1997? Also return the number of orders per nation.
    Sort by total amount descending and limit the result to 3 rows
  sql_query: |
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name      AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE YEAR(o.o_orderdate) = 1997
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
    LIMIT 3;
  llm_sql_query: |-
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name AS nation_name,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    INNER JOIN customer c ON c.c_nationkey = n.n_nationkey
    INNER JOIN orders o ON o.o_custkey = c.c_custkey
    WHERE EXTRACT(year FROM o.o_orderdate) = 1997
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
    LIMIT 3
  tables_used:
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.14
  duration_llm: 3.87
  prompt_tokens: 2322
  completion_tokens: 146
  total_tokens: 2468
  cost_input_EUR: 0.006966
  cost_output_EUR: 0.00219
  cost_total_EUR: 0.009156
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 9
  user_question: |
    For each year, list the number of sales and the total amount for items ordered in December for customers based in the region of EUROPE whose market segment is 'AUTOMOBILE', ordered by year ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'EUROPE'
      AND c.c_mktsegment = 'AUTOMOBILE'
      AND MONTH(o.o_orderdate) = 12
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(year FROM o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    INNER JOIN orders o ON o.o_custkey = c.c_custkey
    INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
    INNER JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'EUROPE'
        AND c.c_mktsegment = 'AUTOMOBILE'
        AND EXTRACT(month FROM o.o_orderdate) = 12
    GROUP BY EXTRACT(year FROM o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 6
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.09
  duration_llm: 3.92
  prompt_tokens: 2371
  completion_tokens: 187
  total_tokens: 2558
  cost_input_EUR: 0.007113
  cost_output_EUR: 0.002805
  cost_total_EUR: 0.009918
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 10
  user_question: |
    List customer data and his account balance for customers that have placed more than 10 orders and whose individual account balance is greater than 6000.
    Count the number of orders per customer too, order the data by customer name.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        c.c_acctbal AS account_balance
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10 AND c.c_acctbal > 6000
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        c.c_acctbal AS account_balance,
        COUNT(*) AS num_orders
    FROM customer c
    INNER JOIN orders o ON o.o_custkey = c.c_custkey
    WHERE c.c_acctbal > 6000
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(*) > 10
    ORDER BY c.c_name;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 255868
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.71
  duration_llm: 3.49
  prompt_tokens: 2272
  completion_tokens: 131
  total_tokens: 2403
  cost_input_EUR: 0.006816
  cost_output_EUR: 0.001965
  cost_total_EUR: 0.008781
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 11
  user_question: |
    Which part types are most commonly sold by quantity, and how many units have been sold for each?
    List only the first 15 part types and order the data by quantity sold descending.
  sql_query: |
    SELECT
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity DESC
    LIMIT 15;
  llm_sql_query: |-
    SELECT
        p.p_partkey AS part_id,
        p.p_name AS part_name,
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    INNER JOIN lineitem l ON l.l_partkey = p.p_partkey
    GROUP BY p.p_partkey, p.p_name, p.p_type
    ORDER BY total_quantity DESC
    LIMIT 15
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 4
  rows_equality: 1.0
  columns_equality: 0.0
  datasets_equality: 0.0
  duration_sql: 37.08
  duration_llm: 3.09
  prompt_tokens: 2512
  completion_tokens: 115
  total_tokens: 2627
  cost_input_EUR: 0.007536
  cost_output_EUR: 0.001725
  cost_total_EUR: 0.009261
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 12
  user_question: |
    How many orders had a total price above 100000 and were placed before 1995 per year?
    Return the number of orders and the order year. Order by year ascending.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders
    WHERE o_totalprice > 100000
      AND o_orderdate < '1995-01-01'
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(year FROM o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders o
    WHERE o.o_totalprice > 100000
        AND o.o_orderdate < DATE '1995-01-01'
    GROUP BY EXTRACT(year FROM o.o_orderdate)
    ORDER BY order_year ASC
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 2
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.34
  duration_llm: 2.53
  prompt_tokens: 2148
  completion_tokens: 91
  total_tokens: 2239
  cost_input_EUR: 0.006444
  cost_output_EUR: 0.001365
  cost_total_EUR: 0.007809
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 13
  user_question: |
    Which customers placed orders in both 1994 and 1995?
    For each, return the number of orders placed in 1994 and the number in 1995.
    Show one row per customer. Order the results by customer name ascending
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) AS num_orders_1995
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) > 0
       AND SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) > 0
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    WITH orders_1994 AS (
        SELECT o_custkey, COUNT(*) as orders_1994
        FROM orders
        WHERE EXTRACT(year FROM o_orderdate) = 1994
        GROUP BY o_custkey
    ),
    orders_1995 AS (
        SELECT o_custkey, COUNT(*) as orders_1995
        FROM orders
        WHERE EXTRACT(year FROM o_orderdate) = 1995
        GROUP BY o_custkey
    )
    SELECT
        c.c_custkey as customer_id,
        c.c_name as customer_name,
        o94.orders_1994 as num_orders_1994,
        o95.orders_1995 as num_orders_1995
    FROM customer c
    INNER JOIN orders_1994 o94 ON c.c_custkey = o94.o_custkey
    INNER JOIN orders_1995 o95 ON c.c_custkey = o95.o_custkey
    ORDER BY c.c_name ASC
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 758246
  columns: 4
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.67
  duration_llm: 4.58
  prompt_tokens: 2278
  completion_tokens: 246
  total_tokens: 2524
  cost_input_EUR: 0.006834
  cost_output_EUR: 0.00369
  cost_total_EUR: 0.010524
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 14
  user_question: |
    How many orders have been made per month in year 1992 by customers in AMERICA?
    Order by year, and month ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(o.o_orderkey) AS num_orders
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'AMERICA'
      AND YEAR(o.o_orderdate) = 1992
    GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_month ASC;
  llm_sql_query: |-
    SELECT
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        EXTRACT(MONTH FROM o.o_orderdate) AS order_month,
        COUNT(*) AS num_orders
    FROM orders o
    INNER JOIN customer c ON c.c_custkey = o.o_custkey
    INNER JOIN nation n ON n.n_nationkey = c.c_nationkey
    INNER JOIN region r ON r.r_regionkey = n.n_regionkey
    WHERE r.r_name = 'AMERICA'
        AND EXTRACT(YEAR FROM o.o_orderdate) = 1992
    GROUP BY
        EXTRACT(YEAR FROM o.o_orderdate),
        EXTRACT(MONTH FROM o.o_orderdate)
    ORDER BY
        order_year ASC,
        order_month ASC
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 12
  columns: 3
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.11
  duration_llm: 3.99
  prompt_tokens: 2360
  completion_tokens: 204
  total_tokens: 2564
  cost_input_EUR: 0.00708
  cost_output_EUR: 0.00306
  cost_total_EUR: 0.01014
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 15
  user_question: |
    Show the number of orders per year between 1992 and 1995, with one column per each 3-letter month abbreviation (e.g., Jan, Feb, Mar) ordered by year ascending.
  sql_query: |
    SELECT
        EXTRACT(YEAR FROM o_orderdate) AS order_year,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jan' THEN 1 ELSE 0 END) AS Jan,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Feb' THEN 1 ELSE 0 END) AS Feb,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Mar' THEN 1 ELSE 0 END) AS Mar,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Apr' THEN 1 ELSE 0 END) AS Apr,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'May' THEN 1 ELSE 0 END) AS May,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jun' THEN 1 ELSE 0 END) AS Jun,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Jul' THEN 1 ELSE 0 END) AS Jul,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Aug' THEN 1 ELSE 0 END) AS Aug,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Sep' THEN 1 ELSE 0 END) AS Sep,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Oct' THEN 1 ELSE 0 END) AS Oct,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Nov' THEN 1 ELSE 0 END) AS Nov,
        SUM(CASE WHEN STRFTIME(o_orderdate, '%b') = 'Dec' THEN 1 ELSE 0 END) AS Dec
    FROM orders
    WHERE EXTRACT(YEAR FROM o_orderdate) BETWEEN 1992 AND 1995
    GROUP BY order_year
    ORDER BY order_year ASC;
  llm_sql_query: |-
    WITH monthly_orders AS (
      SELECT
        EXTRACT(year FROM o_orderdate) AS order_year,
        EXTRACT(month FROM o_orderdate) AS month_num,
        COUNT(*) AS order_count
      FROM orders
      WHERE o_orderdate BETWEEN DATE '1992-01-01' AND DATE '1995-12-31'
      GROUP BY 1, 2
    )
    SELECT
      order_year,
      SUM(CASE WHEN month_num = 1 THEN order_count END) AS jan,
      SUM(CASE WHEN month_num = 2 THEN order_count END) AS feb,
      SUM(CASE WHEN month_num = 3 THEN order_count END) AS mar,
      SUM(CASE WHEN month_num = 4 THEN order_count END) AS apr,
      SUM(CASE WHEN month_num = 5 THEN order_count END) AS may,
      SUM(CASE WHEN month_num = 6 THEN order_count END) AS jun,
      SUM(CASE WHEN month_num = 7 THEN order_count END) AS jul,
      SUM(CASE WHEN month_num = 8 THEN order_count END) AS aug,
      SUM(CASE WHEN month_num = 9 THEN order_count END) AS sep,
      SUM(CASE WHEN month_num = 10 THEN order_count END) AS oct,
      SUM(CASE WHEN month_num = 11 THEN order_count END) AS nov,
      SUM(CASE WHEN month_num = 12 THEN order_count END) AS dec
    FROM monthly_orders
    GROUP BY order_year
    ORDER BY order_year ASC
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 13
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.05
  duration_llm: 5.79
  prompt_tokens: 2153
  completion_tokens: 438
  total_tokens: 2591
  cost_input_EUR: 0.006459
  cost_output_EUR: 0.00657
  cost_total_EUR: 0.013029
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 16
  user_question: |
    For each customer located in the UNITED KINGDOM, compare their total spending in each quarter with the same quarter of the previous year.
    Calculate the year-over-year percentage change and round it to two decimal places.
    Return customer, year, quarter, total spend, and the percentage change.
    Only include cases where the percentage change is positive.
    List the top 20 customers by percentage growth, ordered descending.
  sql_query: |
    WITH customer_quarter AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name AS customer_name,
            EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
            EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM customer c
        JOIN orders o ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, EXTRACT(YEAR FROM o.o_orderdate), EXTRACT(QUARTER FROM o.o_orderdate)
    ),
    yoy AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY customer_id, order_quarter
                ORDER BY order_year
            ) AS prev_year_amount
        FROM customer_quarter
    )
    SELECT
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        CAST(
            100.0 * (total_amount - prev_year_amount) / NULLIF(prev_year_amount, 0)
            AS DECIMAL(10,2)
        ) AS yoy_percent_change
    FROM yoy
    WHERE prev_year_amount IS NOT NULL
      AND (total_amount - prev_year_amount) > 0
    ORDER BY yoy_percent_change DESC
    LIMIT 20;
  llm_sql_query: |-
    WITH quarterly_spend AS (
      SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
        SUM(o.o_totalprice) AS total_amount
      FROM customer c
      INNER JOIN orders o ON c.c_custkey = o.o_custkey
      INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
      WHERE n.n_name = 'UNITED KINGDOM'
      GROUP BY c.c_custkey, c.c_name, order_year, order_quarter
    ),
    yoy_change AS (
      SELECT
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        ROUND(
          100.0 * (total_amount - LAG(total_amount) OVER (
            PARTITION BY customer_id, order_quarter
            ORDER BY order_year
          )) / NULLIF(LAG(total_amount) OVER (
            PARTITION BY customer_id, order_quarter
            ORDER BY order_year
          ), 0),
          2
        ) AS yoy_percent_change
      FROM quarterly_spend
    )
    SELECT
      customer_id,
      customer_name,
      order_year,
      order_quarter,
      total_amount,
      yoy_percent_change
    FROM yoy_change
    WHERE yoy_percent_change > 0
    ORDER BY yoy_percent_change DESC
    LIMIT 20;
  tables_used:
  - customer
  - orders
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 20
  columns: 6
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.43
  duration_llm: 7.01
  prompt_tokens: 2371
  completion_tokens: 412
  total_tokens: 2783
  cost_input_EUR: 0.007113
  cost_output_EUR: 0.00618
  cost_total_EUR: 0.013293
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 17
  user_question: |
    Create a quarterly revenue pivot per region with columns Q1 through Q4, then calculate the absolute difference in revenue versus the previous quarter using LAG Function.
    Return region, year, quarter, revenue, and delta from the previous quarter, ordered by region, year, and quarter.
    Filter the data for orders placed between 1995 and 1997, and customers in the regions of EUROPE or AMERICA.
  sql_query: |
    WITH reg_qtr AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name AS region_name,
            EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
            EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE o.o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1997-12-31'
          AND (r.r_name = 'EUROPE' OR r.r_name = 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, EXTRACT(YEAR FROM o.o_orderdate), EXTRACT(QUARTER FROM o.o_orderdate)
    ),
    lag_calc AS (
        SELECT
            region_id,
            region_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY region_id
                ORDER BY order_year, order_quarter
            ) AS prev_q_amount
        FROM reg_qtr
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        total_amount,
        total_amount - prev_q_amount AS delta_vs_prev_q
    FROM lag_calc
    ORDER BY region_name, order_year, order_quarter;
  llm_sql_query: |-
    WITH quarterly_revenue AS (
      SELECT
        r.r_regionkey AS region_id,
        r.r_name AS region_name,
        EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
        EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
        SUM(o.o_totalprice) AS revenue
      FROM region r
      INNER JOIN nation n ON n.n_regionkey = r.r_regionkey
      INNER JOIN customer c ON c.c_nationkey = n.n_nationkey
      INNER JOIN orders o ON o.o_custkey = c.c_custkey
      WHERE o.o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1997-12-31'
        AND r.r_name IN ('EUROPE', 'AMERICA')
      GROUP BY r.r_regionkey, r.r_name, order_year, order_quarter
    )
    SELECT
      region_id,
      region_name,
      order_year,
      order_quarter,
      revenue,
      revenue - LAG(revenue) OVER (PARTITION BY region_id ORDER BY order_year, order_quarter) AS delta_vs_prev_q
    FROM quarterly_revenue
    ORDER BY region_name, order_year, order_quarter;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 24
  columns: 6
  rows_equality: 1.0
  columns_equality: 0.83
  datasets_equality: 0.0
  duration_sql: 0.22
  duration_llm: 4.61
  prompt_tokens: 2419
  completion_tokens: 322
  total_tokens: 2741
  cost_input_EUR: 0.007257
  cost_output_EUR: 0.00483
  cost_total_EUR: 0.012087
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 18
  user_question: |
    For each region and year, determine the percentage contribution with 2 decimals of every market segment to the total number of orders.
    Return region, year, market segment, total orders, and percent of total, ordered by region, year, and percent descending.
  sql_query: |
    WITH region_year_seg AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            c.c_mktsegment AS market_segment,
            COUNT(*) AS num_orders
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    )
    SELECT
        region_id,
        region_name,
        order_year,
        market_segment,
        num_orders,
        CAST(100.0 * num_orders / SUM(num_orders) OVER (PARTITION BY region_id, order_year) AS decimal(6,2)) AS pct_of_total
    FROM region_year_seg
    ORDER BY region_name, order_year, pct_of_total DESC;
  llm_sql_query: |-
    SELECT
        r.r_regionkey AS region_id,
        r.r_name AS region_name,
        EXTRACT(year FROM o.o_orderdate) AS order_year,
        c.c_mktsegment AS market_segment,
        COUNT(*) AS num_orders,
        ROUND(100.0 * COUNT(*) / SUM(COUNT(*)) OVER (PARTITION BY r.r_regionkey, EXTRACT(year FROM o.o_orderdate)), 2) AS pct_of_total
    FROM region r
    INNER JOIN nation n ON n.n_regionkey = r.r_regionkey
    INNER JOIN customer c ON c.c_nationkey = n.n_nationkey
    INNER JOIN orders o ON o.o_custkey = c.c_custkey
    GROUP BY
        r.r_regionkey,
        r.r_name,
        EXTRACT(year FROM o.o_orderdate),
        c.c_mktsegment
    ORDER BY
        r.r_regionkey,
        order_year,
        pct_of_total DESC
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 175
  columns: 6
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.57
  duration_llm: 4.09
  prompt_tokens: 2386
  completion_tokens: 266
  total_tokens: 2652
  cost_input_EUR: 0.007158
  cost_output_EUR: 0.00399
  cost_total_EUR: 0.011148
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 19
  user_question: |
    For each nation in the region of EUROPE, and for each year based on the order date, find the top 3 suppliers by total quantity supplied.
    Include the nation, the supplier, the total quantity, and their rank.
    Order the data by nation name, year, and ranking.
  sql_query: |
    WITH supplier_qty AS (
        SELECT
            n.n_nationkey AS nation_id,
            n.n_name      AS nation_name,
            s.s_suppkey AS supplier_id,
            s.s_name    AS supplier_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM supplier s
        JOIN nation n ON n.n_nationkey = s.s_nationkey
        JOIN lineitem l ON l.l_suppkey = s.s_suppkey
        JOIN orders o ON o.o_orderkey = l.l_orderkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
        GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, YEAR(o.o_orderdate)
    ),
    ranked AS (
        SELECT
            nation_id,
            nation_name,
            supplier_id,
            supplier_name,
            order_year,
            total_quantity,
            DENSE_RANK() OVER (
                PARTITION BY nation_id, order_year
                ORDER BY total_quantity DESC
            ) AS ranking
        FROM supplier_qty
    )
    SELECT
        nation_id,
        nation_name,
        supplier_id,
        supplier_name,
        order_year,
        total_quantity,
        ranking
    FROM ranked
    WHERE ranking <= 3
    ORDER BY nation_name, order_year, ranking;
  llm_sql_query: |-
    WITH supplier_totals AS (
      SELECT
        n.n_nationkey AS nation_id,
        n.n_name AS nation_name,
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        EXTRACT(year FROM o.o_orderdate) AS order_year,
        SUM(l.l_quantity) AS total_quantity,
        RANK() OVER (PARTITION BY n.n_nationkey, EXTRACT(year FROM o.o_orderdate) ORDER BY SUM(l.l_quantity) DESC) AS supplier_rank
      FROM supplier s
      INNER JOIN nation n ON n.n_nationkey = s.s_nationkey
      INNER JOIN region r ON r.r_regionkey = n.n_regionkey
      INNER JOIN lineitem l ON l.l_suppkey = s.s_suppkey
      INNER JOIN orders o ON o.o_orderkey = l.l_orderkey
      WHERE r.r_name = 'EUROPE'
      GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, EXTRACT(year FROM o.o_orderdate)
    )
    SELECT
      nation_id,
      nation_name,
      supplier_id,
      supplier_name,
      order_year,
      total_quantity,
      supplier_rank
    FROM supplier_totals
    WHERE supplier_rank <= 3
    ORDER BY nation_name, order_year, supplier_rank;
  tables_used:
  - supplier
  - nation
  - lineitem
  - orders
  - customer
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 107
  columns: 7
  rows_equality: 0.99
  columns_equality: 1.0
  datasets_equality: 0.99
  duration_sql: 3.28
  duration_llm: 7.15
  prompt_tokens: 2926
  completion_tokens: 367
  total_tokens: 3293
  cost_input_EUR: 0.008778
  cost_output_EUR: 0.005505
  cost_total_EUR: 0.014283
- iteration: '01'
  model_name: claude-3-5-sonnet-20241022
  question_number: 20
  user_question: |
    Monitor price variability by calculating the standard deviation with 4 decimals of order prices for each part type, year, and quarter.
    Return part type, year, quarter, count of the orders, and the standard deviation of prices, ordered by part type, year, and quarter ascending.
    Include only orders placed by customers from JAPAN.
  sql_query: |
    WITH price_data AS (
      SELECT
          p.p_type AS part_type,
          EXTRACT(YEAR FROM o.o_orderdate) AS order_year,
          EXTRACT(QUARTER FROM o.o_orderdate) AS order_quarter,
          o.o_totalprice AS order_price
      FROM orders o
      JOIN lineitem l ON l.l_orderkey = o.o_orderkey
      JOIN part p ON p.p_partkey = l.l_partkey
      JOIN customer c ON c.c_custkey = o.o_custkey
      JOIN nation n ON n.n_nationkey = c.c_nationkey
      WHERE n.n_name = 'JAPAN'
    )
    SELECT
        part_type,
        order_year,
        order_quarter,
        COUNT(*) AS num_orders,
        CAST(STDDEV_SAMP(order_price) AS DECIMAL(15,4)) AS price_stddev
    FROM price_data
    GROUP BY part_type, order_year, order_quarter
    ORDER BY part_type, order_year, order_quarter;
  llm_sql_query: |-
    SELECT
        p.p_type AS part_type,
        EXTRACT(year FROM o.o_orderdate) AS order_year,
        EXTRACT(quarter FROM o.o_orderdate) AS order_quarter,
        COUNT(*) AS num_orders,
        ROUND(STDDEV(o.o_totalprice), 4) AS price_stddev
    FROM orders o
    INNER JOIN lineitem l ON l.l_orderkey = o.o_orderkey
    INNER JOIN part p ON p.p_partkey = l.l_partkey
    INNER JOIN customer c ON c.c_custkey = o.o_custkey
    INNER JOIN nation n ON n.n_nationkey = c.c_nationkey
    WHERE n.n_name = 'JAPAN'
    GROUP BY p.p_type, EXTRACT(year FROM o.o_orderdate), EXTRACT(quarter FROM o.o_orderdate)
    ORDER BY part_type, order_year, order_quarter;
  tables_used:
  - orders
  - lineitem
  - part
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 4050
  columns: 5
  rows_equality: 1.0
  columns_equality: 1.0
  datasets_equality: 1.0
  duration_sql: 0.98
  duration_llm: 4.62
  prompt_tokens: 2914
  completion_tokens: 236
  total_tokens: 3150
  cost_input_EUR: 0.008742
  cost_output_EUR: 0.00354
  cost_total_EUR: 0.012282
