questions:
- iteration: ''
  model_name: ''
  question_number: 1
  user_question: |
    Which customers from the 'BUILDING' market segment placed more than 10 orders in 1996? Order by total order value descending.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND YEAR(o.o_orderdate) = 1996
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY total_amount DESC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM customer c
    INNER JOIN orders o ON o.o_custkey = c.c_custkey
    WHERE c.c_mktsegment = 'BUILDING'
      AND o.o_orderdate BETWEEN '1996-01-01' AND '1996-12-31'
    GROUP BY c.c_custkey, c.c_name
    HAVING COUNT(*) > 10
    ORDER BY total_amount DESC;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.34
  duration_llm: 1.63
  prompt_tokens: 1644
  completion_tokens: 121
  total_tokens: 1765
  cost_input_EUR: 0.000658
  cost_output_EUR: 0.000194
  cost_total_EUR: 0.000851
- iteration: ''
  model_name: ''
  question_number: 2
  user_question: |
    For each region, what is the average supplier account balance and how many suppliers are in each region? Order by average balance descending.
  sql_query: |
    SELECT
        r.r_regionkey AS region_id,
        r.r_name      AS region_name,
        AVG(s.s_acctbal) AS avg_balance,
        COUNT(s.s_suppkey) AS supplier_count
    FROM region r
    JOIN nation n ON r.r_regionkey = n.n_regionkey
    JOIN supplier s ON n.n_nationkey = s.s_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_balance DESC;
  llm_sql_query: |-
    SELECT
        r.r_regionkey AS region_id,
        r.r_name AS region_name,
        AVG(s.s_acctbal) AS avg_supplier_acctbal,
        COUNT(s.s_suppkey) AS num_suppliers
    FROM region r
    JOIN nation n ON n.n_regionkey = r.r_regionkey
    JOIN supplier s ON s.s_nationkey = n.n_nationkey
    GROUP BY r.r_regionkey, r.r_name
    ORDER BY avg_supplier_acctbal DESC;
  tables_used:
  - region
  - nation
  - supplier
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.23
  duration_llm: 1.59
  prompt_tokens: 1553
  completion_tokens: 102
  total_tokens: 1655
  cost_input_EUR: 0.000621
  cost_output_EUR: 0.000163
  cost_total_EUR: 0.000784
- iteration: ''
  model_name: ''
  question_number: 3
  user_question: |
    List the top 5 parts by total quantity ordered across all years. Order by total quantity descending.
  sql_query: |
    SELECT
        p.p_partkey AS part_id,
        p.p_name    AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC
    OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 5
        p.p_partkey AS part_id,
        p.p_name AS part_name,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    INNER JOIN lineitem l ON l.l_partkey = p.p_partkey
    GROUP BY p.p_partkey, p.p_name
    ORDER BY total_quantity DESC;
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 5
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 8.4
  duration_llm: 1.37
  prompt_tokens: 1837
  completion_tokens: 70
  total_tokens: 1907
  cost_input_EUR: 0.000735
  cost_output_EUR: 0.000112
  cost_total_EUR: 0.000847
- iteration: ''
  model_name: ''
  question_number: 4
  user_question: |
    For each year from 1992 to 1994, identify the top 5 parts by total quantity ordered for customers from the region of ASIA. Order by year and total quantity descending.
  sql_query: |
    WITH yearly_totals AS (
        SELECT
            p.p_partkey AS part_id,
            p.p_name    AS part_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity,
            ROW_NUMBER() OVER (
                PARTITION BY YEAR(o.o_orderdate)
                ORDER BY SUM(l.l_quantity) DESC
            ) AS rn
        FROM part p
        JOIN lineitem l ON p.p_partkey = l.l_partkey
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        JOIN customer c ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        join region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'ASIA'
          AND YEAR(o.o_orderdate) BETWEEN 1992 AND 1994
        GROUP BY p.p_partkey, p.p_name, YEAR(o.o_orderdate)
    )
    SELECT
        part_id,
        part_name,
        order_year,
        total_quantity
    FROM yearly_totals
    WHERE rn <= 5
    ORDER BY order_year, total_quantity DESC;
  llm_sql_query: |-
    WITH region_nation AS (
        SELECT n.n_nationkey
        FROM nation n
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'ASIA'
    ), asia_customers AS (
        SELECT c.c_custkey
        FROM customer c
        WHERE c.c_nationkey IN (SELECT n_nationkey FROM region_nation)
    ), orders_filtered AS (
        SELECT o.o_orderkey, o.o_orderdate, o.o_custkey
        FROM orders o
        WHERE o.o_custkey IN (SELECT c_custkey FROM asia_customers)
          AND o.o_orderdate BETWEEN '1992-01-01' AND '1994-12-31'
    ), yearly_part_quantity AS (
        SELECT
            YEAR(o.o_orderdate) AS order_year,
            p.p_partkey AS part_id,
            p.p_name AS part_name,
            SUM(l.l_quantity) AS total_quantity
        FROM orders_filtered o
        JOIN lineitem l ON o.o_orderkey = l.l_orderkey
        JOIN part p ON p.p_partkey = l.l_partkey
        GROUP BY YEAR(o.o_orderdate), p.p_partkey, p.p_name
    ), ranked_parts AS (
        SELECT
            order_year,
            part_id,
            part_name,
            total_quantity,
            ROW_NUMBER() OVER (PARTITION BY order_year ORDER BY total_quantity DESC) AS rn
        FROM yearly_part_quantity
    )
    SELECT
        order_year,
        part_id,
        part_name,
        total_quantity
    FROM ranked_parts
    WHERE rn <= 5
    ORDER BY order_year, total_quantity DESC;
  tables_used:
  - part
  - lineitem
  - orders
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 5.13
  duration_llm: 3.36
  prompt_tokens: 2165
  completion_tokens: 344
  total_tokens: 2509
  cost_input_EUR: 0.000866
  cost_output_EUR: 0.00055
  cost_total_EUR: 0.001416
- iteration: ''
  model_name: ''
  question_number: 5
  user_question: |
    For orders placed in 1994, how many unique suppliers provided parts of type 'SMALL PLATED STEEL' and size 4,
    and what was their average supply cost per supplier, weighted by available quantity? Order the results by supplier.
  sql_query: |
    SELECT
        l.l_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        COUNT(DISTINCT l.l_suppkey) AS num_suppliers,
        AVG(ps.ps_supplycost * ps.ps_availqty) AS avg_cost
    FROM orders o
    JOIN lineitem l ON o.o_orderkey = l.l_orderkey
    JOIN partsupp ps ON l.l_partkey = ps.ps_partkey AND l.l_suppkey = ps.ps_suppkey
    JOIN part p ON l.l_partkey = p.p_partkey
    JOIN supplier s ON l.l_suppkey = s.s_suppkey
    WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
      AND p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
    GROUP BY l.l_suppkey, s.s_name
    ORDER BY s.s_name ASC;
  llm_sql_query: |-
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        COUNT(DISTINCT s.s_suppkey) OVER() AS num_suppliers,
        AVG(CAST(ps.ps_supplycost * ps.ps_availqty AS FLOAT) / NULLIF(ps.ps_availqty, 0)) OVER(PARTITION BY s.s_suppkey) AS avg_weighted_supply_cost
    FROM supplier s
    JOIN partsupp ps ON ps.ps_suppkey = s.s_suppkey
    JOIN part p ON p.p_partkey = ps.ps_partkey
    JOIN lineitem l ON l.l_partkey = p.p_partkey AND l.l_suppkey = s.s_suppkey
    JOIN orders o ON o.o_orderkey = l.l_orderkey
    WHERE p.p_type = 'SMALL PLATED STEEL'
      AND p.p_size = 4
      AND o.o_orderdate BETWEEN '1994-01-01' AND '1994-12-31'
    GROUP BY s.s_suppkey, s.s_name, ps.ps_supplycost, ps.ps_availqty
    ORDER BY s.s_name;
  tables_used:
  - orders
  - lineitem
  - partsupp
  - part
  - supplier
  executed: false
  llm_sql_query_changed: false
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 2.48
  prompt_tokens: 2185
  completion_tokens: 237
  total_tokens: 2422
  cost_input_EUR: 0.000874
  cost_output_EUR: 0.000379
  cost_total_EUR: 0.001253
- iteration: ''
  model_name: ''
  question_number: 6
  user_question: |
    List the top 10 suppliers from GERMANY that supplied parts of type 'SMALL PLATED STEEL' and size 4.
    For each, calculate the total supply cost (supply cost x available quantity).
    Do not include the supplier's nation in the output. Order by total cost descending.
  sql_query: |
    SELECT
        s.s_suppkey AS supplier_id,
        s.s_name    AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    JOIN nation n ON s.s_nationkey = n.n_nationkey
    JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE p.p_size = 4
      AND p.p_type = 'SMALL PLATED STEEL'
      AND n.n_name = 'GERMANY'
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_cost DESC
    OFFSET 0 ROWS FETCH NEXT 10 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 10
        s.s_suppkey AS supplier_id,
        s.s_name AS supplier_name,
        SUM(ps.ps_supplycost * ps.ps_availqty) AS total_cost
    FROM supplier s
    INNER JOIN nation n ON s.s_nationkey = n.n_nationkey
    INNER JOIN partsupp ps ON s.s_suppkey = ps.ps_suppkey
    INNER JOIN part p ON ps.ps_partkey = p.p_partkey
    WHERE n.n_name = 'GERMANY'
      AND p.p_type = 'SMALL PLATED STEEL'
      AND p.p_size = 4
    GROUP BY s.s_suppkey, s.s_name
    ORDER BY total_cost DESC;
  tables_used:
  - supplier
  - partsupp
  - nation
  - part
  executed: true
  llm_sql_query_changed: false
  rows: 10
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.47
  duration_llm: 2.02
  prompt_tokens: 1724
  completion_tokens: 146
  total_tokens: 1870
  cost_input_EUR: 0.00069
  cost_output_EUR: 0.000234
  cost_total_EUR: 0.000923
- iteration: ''
  model_name: ''
  question_number: 7
  user_question: |
    Find the average order price (rounded to 2 decimals) and the total number of orders per year between 1992 and 1998, inclusive.
    Group by the year of the order date and return the results ordered by year ascending.
    Return the year, the total number of orders, and the average price.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        AVG(o_totalprice) AS avg_price,
        COUNT(*) AS num_orders
    FROM orders
    WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1998
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        ROUND(AVG(o.o_totalprice), 2) AS avg_price
    FROM orders o
    WHERE o.o_orderdate BETWEEN '1992-01-01' AND '1998-12-31'
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 7
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 2.0
  duration_llm: 1.37
  prompt_tokens: 1582
  completion_tokens: 78
  total_tokens: 1660
  cost_input_EUR: 0.000633
  cost_output_EUR: 0.000125
  cost_total_EUR: 0.000758
- iteration: ''
  model_name: ''
  question_number: 8
  user_question: |
    Which three nations had the highest total order amount in 1997? Also return the number of orders per nation.
    Sort by total amount descending and limit the result to 3 rows
  sql_query: |
    SELECT
        n.n_nationkey AS nation_id,
        n.n_name      AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE YEAR(o.o_orderdate) = 1997
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC
    OFFSET 0 ROWS FETCH NEXT 3 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 3
        n.n_nationkey AS nation_id,
        n.n_name AS nation_name,
        COUNT(o.o_orderkey) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM nation n
    JOIN customer c ON n.n_nationkey = c.c_nationkey
    JOIN orders o ON c.c_custkey = o.o_custkey
    WHERE o.o_orderdate BETWEEN '1997-01-01' AND '1997-12-31'
    GROUP BY n.n_nationkey, n.n_name
    ORDER BY total_amount DESC;
  tables_used:
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.78
  duration_llm: 1.94
  prompt_tokens: 1702
  completion_tokens: 123
  total_tokens: 1825
  cost_input_EUR: 0.000681
  cost_output_EUR: 0.000197
  cost_total_EUR: 0.000878
- iteration: ''
  model_name: ''
  question_number: 9
  user_question: |
    For each year, list the number of sales and the total amount for items ordered in December for customers based in the region of EUROPE whose market segment is 'AUTOMOBILE', ordered by year ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'EUROPE'
      AND c.c_mktsegment = 'AUTOMOBILE'
      AND MONTH(o.o_orderdate) = 12
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    WITH europe_customers AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name AS customer_name
        FROM customer c
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
          AND c.c_mktsegment = 'AUTOMOBILE'
    )
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders,
        SUM(o.o_totalprice) AS total_amount
    FROM orders o
    JOIN europe_customers ec ON o.o_custkey = ec.customer_id
    WHERE MONTH(o.o_orderdate) = 12
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.92
  duration_llm: 2.34
  prompt_tokens: 1743
  completion_tokens: 166
  total_tokens: 1909
  cost_input_EUR: 0.000697
  cost_output_EUR: 0.000266
  cost_total_EUR: 0.000963
- iteration: ''
  model_name: ''
  question_number: 10
  user_question: |
    List customer data and his account balance for customers that have placed more than 10 orders and whose individual account balance is greater than 6000.
    Count the number of orders per customer too, order the data by customer name.
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        COUNT(o.o_orderkey) AS num_orders,
        c.c_acctbal AS account_balance
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10 AND c.c_acctbal > 6000
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    SELECT
        c.c_custkey AS customer_id,
        c.c_name AS customer_name,
        c.c_acctbal AS customer_account_balance,
        COUNT(o.o_orderkey) AS num_orders
    FROM customer c
    JOIN orders o ON o.o_custkey = c.c_custkey
    WHERE c.c_acctbal > 6000
    GROUP BY c.c_custkey, c.c_name, c.c_acctbal
    HAVING COUNT(o.o_orderkey) > 10
    ORDER BY c.c_name;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 19
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 2.37
  duration_llm: 1.89
  prompt_tokens: 1663
  completion_tokens: 110
  total_tokens: 1773
  cost_input_EUR: 0.000665
  cost_output_EUR: 0.000176
  cost_total_EUR: 0.000841
- iteration: ''
  model_name: ''
  question_number: 11
  user_question: |
    Which part types are most commonly sold by quantity, and how many units have been sold for each?
    List only the first 15 part types and order the data by quantity sold descending.
  sql_query: |
    SELECT
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity
    FROM part p
    JOIN lineitem l ON p.p_partkey = l.l_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity DESC
    OFFSET 0 ROWS FETCH NEXT 15 ROWS ONLY;
  llm_sql_query: |-
    SELECT TOP 15
        p.p_type AS part_type,
        SUM(l.l_quantity) AS total_quantity_sold
    FROM lineitem l
    INNER JOIN part p ON l.l_partkey = p.p_partkey
    GROUP BY p.p_type
    ORDER BY total_quantity_sold DESC;
  tables_used:
  - part
  - lineitem
  executed: true
  llm_sql_query_changed: false
  rows: 15
  columns: 2
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 6.13
  duration_llm: 1.33
  prompt_tokens: 1855
  completion_tokens: 60
  total_tokens: 1915
  cost_input_EUR: 0.000742
  cost_output_EUR: 9.6e-05
  cost_total_EUR: 0.000838
- iteration: ''
  model_name: ''
  question_number: 12
  user_question: |
    How many orders had a total price above 100000 and were placed before 1995 per year?
    Return the number of orders and the order year. Order by year ascending.
  sql_query: |
    SELECT
        YEAR(o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders
    WHERE o_totalprice > 100000
      AND o_orderdate < '1995-01-01'
    GROUP BY YEAR(o_orderdate)
    ORDER BY order_year ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        COUNT(*) AS num_orders
    FROM orders o
    WHERE o.o_totalprice > 100000
      AND o.o_orderdate < '1995-01-01'
    GROUP BY YEAR(o.o_orderdate)
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 2
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.49
  duration_llm: 1.24
  prompt_tokens: 1555
  completion_tokens: 64
  total_tokens: 1619
  cost_input_EUR: 0.000622
  cost_output_EUR: 0.000102
  cost_total_EUR: 0.000724
- iteration: ''
  model_name: ''
  question_number: 13
  user_question: |
    Which customers placed orders in both 1994 and 1995?
    For each, return the number of orders placed in 1994 and the number in 1995.
    Show one row per customer. Order the results by customer name ascending
  sql_query: |
    SELECT
        c.c_custkey AS customer_id,
        c.c_name    AS customer_name,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) AS num_orders_1994,
        SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) AS num_orders_1995
    FROM customer c
    JOIN orders o ON c.c_custkey = o.o_custkey
    GROUP BY c.c_custkey, c.c_name
    HAVING SUM(CASE WHEN YEAR(o.o_orderdate) = 1994 THEN 1 ELSE 0 END) > 0
       AND SUM(CASE WHEN YEAR(o.o_orderdate) = 1995 THEN 1 ELSE 0 END) > 0
    ORDER BY customer_name ASC;
  llm_sql_query: |-
    WITH customer_orders_by_year AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name AS customer_name,
            YEAR(o.o_orderdate) AS order_year,
            COUNT(o.o_orderkey) AS num_orders
        FROM customer c
        INNER JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE o.o_orderdate BETWEEN '1994-01-01' AND '1995-12-31'
        GROUP BY
            c.c_custkey,
            c.c_name,
            YEAR(o.o_orderdate)
    ),
    orders_pivot AS (
        SELECT
            customer_id,
            customer_name,
            ISNULL(SUM(CASE WHEN order_year = 1994 THEN num_orders END), 0) AS num_orders_1994,
            ISNULL(SUM(CASE WHEN order_year = 1995 THEN num_orders END), 0) AS num_orders_1995
        FROM customer_orders_by_year
        GROUP BY customer_id, customer_name
    )
    SELECT
        customer_id,
        customer_name,
        num_orders_1994,
        num_orders_1995
    FROM orders_pivot
    WHERE num_orders_1994 > 0 AND num_orders_1995 > 0
    ORDER BY customer_name ASC;
  tables_used:
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 6
  columns: 4
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.43
  duration_llm: 5.7
  prompt_tokens: 1667
  completion_tokens: 267
  total_tokens: 1934
  cost_input_EUR: 0.000667
  cost_output_EUR: 0.000427
  cost_total_EUR: 0.001094
- iteration: ''
  model_name: ''
  question_number: 14
  user_question: |
    How many orders have been made per month in year 1992 by customers in AMERICA?
    Order by year, and month ascending.
  sql_query: |
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(o.o_orderkey) AS num_orders
    FROM orders o
    JOIN customer c ON o.o_custkey = c.c_custkey
    JOIN nation n ON c.c_nationkey = n.n_nationkey
    JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE r.r_name = 'AMERICA'
      AND YEAR(o.o_orderdate) = 1992
    GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_month ASC;
  llm_sql_query: |-
    SELECT
        YEAR(o.o_orderdate) AS order_year,
        MONTH(o.o_orderdate) AS order_month,
        COUNT(*) AS num_orders
    FROM orders o
    INNER JOIN customer c ON o.o_custkey = c.c_custkey
    INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
    INNER JOIN region r ON n.n_regionkey = r.r_regionkey
    WHERE YEAR(o.o_orderdate) = 1992
      AND r.r_name = 'AMERICA'
    GROUP BY YEAR(o.o_orderdate), MONTH(o.o_orderdate)
    ORDER BY order_year ASC, order_month ASC;
  tables_used:
  - orders
  - customer
  - nation
  - region
  executed: true
  llm_sql_query_changed: false
  rows: 3
  columns: 3
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 1.87
  duration_llm: 1.96
  prompt_tokens: 1730
  completion_tokens: 131
  total_tokens: 1861
  cost_input_EUR: 0.000692
  cost_output_EUR: 0.00021
  cost_total_EUR: 0.000902
- iteration: ''
  model_name: ''
  question_number: 15
  user_question: |
    Show the number of orders per year between 1992 and 1995, with one column per each 3-letter month abbreviation (e.g., Jan, Feb, Mar) ordered by year ascending.
  sql_query: |
    SELECT *
    FROM (
        SELECT
            YEAR(o_orderdate) AS order_year,
            FORMAT(o_orderdate, 'MMM') AS order_month,
            COUNT(*) AS num_orders
        FROM orders
        WHERE YEAR(o_orderdate) BETWEEN 1992 AND 1995
        GROUP BY YEAR(o_orderdate), FORMAT(o_orderdate, 'MMM')
    ) AS source_data
    PIVOT (
        SUM(num_orders)
        FOR order_month IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun],
                            [Jul], [Aug], [Sep], [Oct], [Nov], [Dec])
    ) AS pivot_table
    ORDER BY order_year ASC;
  llm_sql_query: |-
    WITH orders_cte AS (
        SELECT
            YEAR(o.o_orderdate) AS order_year,
            DATENAME(MONTH, o.o_orderdate) AS order_month_name,
            o.o_orderkey
        FROM orders o
        WHERE o.o_orderdate BETWEEN '1992-01-01' AND '1995-12-31'
    )
    SELECT
        order_year,
        ISNULL([Jan], 0) AS jan,
        ISNULL([Feb], 0) AS feb,
        ISNULL([Mar], 0) AS mar,
        ISNULL([Apr], 0) AS apr,
        ISNULL([May], 0) AS may,
        ISNULL([Jun], 0) AS jun,
        ISNULL([Jul], 0) AS jul,
        ISNULL([Aug], 0) AS aug,
        ISNULL([Sep], 0) AS sep,
        ISNULL([Oct], 0) AS oct,
        ISNULL([Nov], 0) AS nov,
        ISNULL([Dec], 0) AS dec
    FROM (
        SELECT
            order_year,
            LEFT(order_month_name, 3) AS order_month_abbr,
            o_orderkey
        FROM orders_cte
    ) src
    PIVOT (
        COUNT(o_orderkey)
        FOR order_month_abbr IN ([Jan], [Feb], [Mar], [Apr], [May], [Jun], [Jul], [Aug], [Sep], [Oct], [Nov], [Dec])
    ) AS p
    ORDER BY order_year ASC;
  tables_used:
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 4
  columns: 13
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 5.67
  duration_llm: 3.72
  prompt_tokens: 1559
  completion_tokens: 325
  total_tokens: 1884
  cost_input_EUR: 0.000624
  cost_output_EUR: 0.00052
  cost_total_EUR: 0.001144
- iteration: ''
  model_name: ''
  question_number: 16
  user_question: |
    For each customer located in the UNITED KINGDOM, compare their total spending in each quarter with the same quarter of the previous year.
    Calculate the year-over-year percentage change and round it to two decimal places.
    Return customer, year, quarter, total spend, and the percentage change.
    Only include cases where the percentage change is positive.
    List the top 20 customers by percentage growth, ordered descending.
  sql_query: |
    WITH customer_quarter AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name    AS customer_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM customer c
        JOIN orders o ON o.o_custkey = c.c_custkey
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    yoy AS (
        SELECT
            customer_id,
            customer_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY customer_id, order_quarter
                ORDER BY order_year
            ) AS prev_year_amount
        FROM customer_quarter
    )
    SELECT TOP 20
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_amount,
        CAST(
            100.0 * (total_amount - prev_year_amount) / NULLIF(prev_year_amount, 0)
            AS decimal(10,2)
        ) AS yoy_percent_change
    FROM yoy
    WHERE prev_year_amount IS NOT NULL
      AND (total_amount - prev_year_amount) > 0
    ORDER BY yoy_percent_change DESC;
  llm_sql_query: |-
    WITH customer_spend AS (
        SELECT
            c.c_custkey AS customer_id,
            c.c_name AS customer_name,
            DATEPART(YEAR, o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_spend
        FROM customer c
        JOIN nation n ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE n.n_name = 'UNITED KINGDOM'
        GROUP BY c.c_custkey, c.c_name, DATEPART(YEAR, o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    customer_spend_lag AS (
        SELECT
            cs.customer_id,
            cs.customer_name,
            cs.order_year,
            cs.order_quarter,
            cs.total_spend,
            LAG(cs.total_spend) OVER (PARTITION BY cs.customer_id, cs.order_quarter ORDER BY cs.order_year) AS prev_year_spend
        FROM customer_spend cs
    )
    SELECT TOP 20
        customer_id,
        customer_name,
        order_year,
        order_quarter,
        total_spend,
        ROUND(100.0 * (total_spend - prev_year_spend) / NULLIF(prev_year_spend, 0), 2) AS yoy_percent_change
    FROM customer_spend_lag
    WHERE prev_year_spend IS NOT NULL
      AND total_spend > prev_year_spend
    ORDER BY yoy_percent_change DESC;
  tables_used:
  - customer
  - orders
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 20
  columns: 6
  percent_rows_equality: 1.0
  percent_columns_equality: 0.83
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 1.93
  duration_llm: 3.34
  prompt_tokens: 1744
  completion_tokens: 335
  total_tokens: 2079
  cost_input_EUR: 0.000698
  cost_output_EUR: 0.000536
  cost_total_EUR: 0.001234
- iteration: ''
  model_name: ''
  question_number: 17
  user_question: |
    Create a quarterly revenue pivot per region with columns Q1 through Q4, then calculate the absolute difference in revenue versus the previous quarter using LAG Function.
    Return region, year, quarter, revenue, and delta from the previous quarter, ordered by region, year, and quarter.
    Filter the data for orders placed between 1995 and 1997, and customers in the regions of EUROPE or AMERICA.
  sql_query: |
    WITH reg_qtr AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS total_amount
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        WHERE o.o_orderdate BETWEEN '1995-01-01' AND '1997-12-31'
          AND (r.r_name = 'EUROPE' OR r.r_name = 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    ),
    lag_calc AS (
        SELECT
            region_id,
            region_name,
            order_year,
            order_quarter,
            total_amount,
            LAG(total_amount) OVER (
                PARTITION BY region_id
                ORDER BY order_year, order_quarter
            ) AS prev_q_amount
        FROM reg_qtr
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        total_amount,
        total_amount - prev_q_amount AS delta_vs_prev_q
    FROM lag_calc
    ORDER BY region_name, order_year, order_quarter;
  llm_sql_query: |-
    WITH regional_revenue AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            SUM(o.o_totalprice) AS revenue
        FROM orders o
        INNER JOIN customer c ON o.o_custkey = c.c_custkey
        INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
        INNER JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE o.o_orderdate BETWEEN '1995-01-01' AND '1997-12-31'
          AND r.r_name IN ('EUROPE', 'AMERICA')
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), DATEPART(QUARTER, o.o_orderdate)
    )
    SELECT
        region_id,
        region_name,
        order_year,
        order_quarter,
        revenue,
        revenue - LAG(revenue) OVER (PARTITION BY region_id, order_year ORDER BY order_quarter) AS delta_vs_prev_quarter
    FROM regional_revenue
    ORDER BY region_name, order_year, order_quarter;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 16
  columns: 6
  percent_rows_equality: 1.0
  percent_columns_equality: 0.83
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 2.12
  duration_llm: 7.91
  prompt_tokens: 1787
  completion_tokens: 263
  total_tokens: 2050
  cost_input_EUR: 0.000715
  cost_output_EUR: 0.000421
  cost_total_EUR: 0.001136
- iteration: ''
  model_name: ''
  question_number: 18
  user_question: |
    For each region and year, determine the percentage contribution with 2 decimals of every market segment to the total number of orders.
    Return region, year, market segment, total orders, and percent of total, ordered by region, year, and percent descending.
  sql_query: |
    WITH region_year_seg AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name      AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            c.c_mktsegment AS market_segment,
            COUNT(*) AS num_orders
        FROM region r
        JOIN nation n ON n.n_regionkey = r.r_regionkey
        JOIN customer c ON c.c_nationkey = n.n_nationkey
        JOIN orders o ON o.o_custkey = c.c_custkey
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    )
    SELECT
        region_id,
        region_name,
        order_year,
        market_segment,
        num_orders,
        CAST(100.0 * num_orders / SUM(num_orders) OVER (PARTITION BY region_id, order_year) AS decimal(6,2)) AS pct_of_total
    FROM region_year_seg
    ORDER BY region_name, order_year, pct_of_total DESC;
  llm_sql_query: |-
    WITH region_year_segment AS (
        SELECT
            r.r_regionkey AS region_id,
            r.r_name AS region_name,
            YEAR(o.o_orderdate) AS order_year,
            c.c_mktsegment AS market_segment,
            COUNT(*) AS num_orders
        FROM orders o
        INNER JOIN customer c ON o.o_custkey = c.c_custkey
        INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
        INNER JOIN region r ON n.n_regionkey = r.r_regionkey
        GROUP BY r.r_regionkey, r.r_name, YEAR(o.o_orderdate), c.c_mktsegment
    ),
    region_year_total AS (
        SELECT
            region_id,
            order_year,
            SUM(num_orders) AS total_orders
        FROM region_year_segment
        GROUP BY region_id, order_year
    )
    SELECT
        rys.region_id,
        rys.region_name,
        rys.order_year,
        rys.market_segment,
        rys.num_orders,
        CAST(ROUND(100.0 * rys.num_orders / ryt.total_orders, 2) AS DECIMAL(5,2)) AS pct_of_total
    FROM region_year_segment rys
    INNER JOIN region_year_total ryt ON rys.region_id = ryt.region_id AND rys.order_year = ryt.order_year
    ORDER BY rys.region_name, rys.order_year, pct_of_total DESC;
  tables_used:
  - region
  - nation
  - customer
  - orders
  executed: true
  llm_sql_query_changed: false
  rows: 122
  columns: 6
  percent_rows_equality: 1.0
  percent_columns_equality: 1.0
  percent_source_rows_equality: 1.0
  percent_llm_rows_equality: 1.0
  duration_sql: 4.3
  duration_llm: 5.29
  prompt_tokens: 1754
  completion_tokens: 293
  total_tokens: 2047
  cost_input_EUR: 0.000702
  cost_output_EUR: 0.000469
  cost_total_EUR: 0.00117
- iteration: ''
  model_name: ''
  question_number: 19
  user_question: |
    For each nation in the region of EUROPE, and for each year based on the order date, find the top 3 suppliers by total quantity supplied.
    Include the nation, the supplier, the total quantity, and their rank.
    Order the data by nation name, year, and ranking.
  sql_query: |
    WITH supplier_qty AS (
        SELECT
            n.n_nationkey AS nation_id,
            n.n_name      AS nation_name,
            s.s_suppkey AS supplier_id,
            s.s_name    AS supplier_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM supplier s
        JOIN nation n ON n.n_nationkey = s.s_nationkey
        JOIN lineitem l ON l.l_suppkey = s.s_suppkey
        JOIN orders o ON o.o_orderkey = l.l_orderkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
        GROUP BY n.n_nationkey, n.n_name, s.s_suppkey, s.s_name, YEAR(o.o_orderdate)
    ),
    ranked AS (
        SELECT
            nation_id,
            nation_name,
            supplier_id,
            supplier_name,
            order_year,
            total_quantity,
            DENSE_RANK() OVER (
                PARTITION BY nation_id, order_year
                ORDER BY total_quantity DESC
            ) AS ranking
        FROM supplier_qty
    )
    SELECT
        nation_id,
        nation_name,
        supplier_id,
        supplier_name,
        order_year,
        total_quantity,
        ranking
    FROM ranked
    WHERE ranking <= 3
    ORDER BY nation_name, order_year, ranking;
  llm_sql_query: |-
    WITH EuropeNations AS (
        SELECT n.n_nationkey, n.n_name AS nation_name
        FROM nation n
        JOIN region r ON n.n_regionkey = r.r_regionkey
        WHERE r.r_name = 'EUROPE'
    ),
    SupplierQuantities AS (
        SELECT
            s.s_suppkey AS supplier_id,
            s.s_name AS supplier_name,
            en.n_name AS nation_name,
            YEAR(o.o_orderdate) AS order_year,
            SUM(l.l_quantity) AS total_quantity
        FROM lineitem l
        JOIN orders o ON l.l_orderkey = o.o_orderkey
        JOIN supplier s ON l.l_suppkey = s.s_suppkey
        JOIN EuropeNations en ON s.s_nationkey = en.n_nationkey
        GROUP BY s.s_suppkey, s.s_name, en.n_name, YEAR(o.o_orderdate)
    ),
    RankedSuppliers AS (
        SELECT
            supplier_id,
            supplier_name,
            nation_name,
            order_year,
            total_quantity,
            ROW_NUMBER() OVER (PARTITION BY nation_name, order_year ORDER BY total_quantity DESC) AS rank
        FROM SupplierQuantities
    )
    SELECT
        nation_name,
        order_year,
        supplier_id,
        supplier_name,
        total_quantity,
        rank
    FROM RankedSuppliers
    WHERE rank <= 3
    ORDER BY nation_name, order_year, rank;
  tables_used:
  - supplier
  - nation
  - lineitem
  - orders
  - customer
  - region
  executed: false
  llm_sql_query_changed: false
  rows: 0
  columns: 0
  percent_rows_equality: 0.0
  percent_columns_equality: 0.0
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 0
  duration_llm: 3.23
  prompt_tokens: 2204
  completion_tokens: 295
  total_tokens: 2499
  cost_input_EUR: 0.000882
  cost_output_EUR: 0.000472
  cost_total_EUR: 0.001354
- iteration: ''
  model_name: ''
  question_number: 20
  user_question: |
    Monitor price variability by calculating the standard deviation with 4 decimals of order prices for each part type, year, and quarter.
    Return part type, year, quarter, count of the orders, and the standard deviation of prices, ordered by part type, year, and quarter ascending.
    Include only orders placed by customers from JAPAN.
  sql_query: |
    WITH price_data AS (
        SELECT
            p.p_type AS part_type,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            o.o_totalprice AS order_price
        FROM orders o
        JOIN lineitem l ON l.l_orderkey = o.o_orderkey
        JOIN part p ON p.p_partkey = l.l_partkey
        JOIN customer c ON c.c_custkey = o.o_custkey
        JOIN nation n ON n.n_nationkey = c.c_nationkey
        WHERE n.n_name = 'JAPAN'
    )
    SELECT
        part_type,
        order_year,
        order_quarter,
        COUNT(*) AS num_orders,
        CAST(STDEV(order_price) AS decimal(15,4)) AS price_stddev
    FROM price_data
    GROUP BY part_type, order_year, order_quarter
    ORDER BY part_type, order_year, order_quarter;
  llm_sql_query: |-
    WITH order_details AS (
        SELECT
            p.p_type AS part_type,
            YEAR(o.o_orderdate) AS order_year,
            DATEPART(QUARTER, o.o_orderdate) AS order_quarter,
            o.o_orderkey,
            o.o_totalprice
        FROM orders o
        INNER JOIN customer c ON o.o_custkey = c.c_custkey
        INNER JOIN lineitem l ON o.o_orderkey = l.l_orderkey
        INNER JOIN part p ON l.l_partkey = p.p_partkey
        INNER JOIN nation n ON c.c_nationkey = n.n_nationkey
        WHERE n.n_name = 'JAPAN'
    )
    SELECT
        part_type,
        order_year,
        order_quarter,
        COUNT(DISTINCT o_orderkey) AS num_orders,
        ROUND(STDEV(o_totalprice), 4) AS price_stddev
    FROM order_details
    GROUP BY
        part_type,
        order_year,
        order_quarter
    ORDER BY
        part_type,
        order_year,
        order_quarter;
  tables_used:
  - orders
  - lineitem
  - part
  - customer
  - nation
  executed: true
  llm_sql_query_changed: false
  rows: 1501
  columns: 5
  percent_rows_equality: 1.0
  percent_columns_equality: 0.8
  percent_source_rows_equality: 0.0
  percent_llm_rows_equality: 0.0
  duration_sql: 4.43
  duration_llm: 2.82
  prompt_tokens: 2193
  completion_tokens: 224
  total_tokens: 2417
  cost_input_EUR: 0.000877
  cost_output_EUR: 0.000358
  cost_total_EUR: 0.001236
